datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  // @id: Đánh dấu đây là khóa chính 
  // @default(auto()): Giá trị mặc định của trường id là tự động generate
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  // ? nghĩa là có thể null
  firstName        String?
  lastName         String?
  email            String             @unique
  password         String
  image            String?
  bookedVisits     Json[]
  // dùng @relation("Owner") @relation("Owner") 
  ownedResidencies Residency[]        @relation("Owner")
  Reservations     Reservation[]
  Rating           Rating[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  favResidenciesID favResidenciesID[]
}

model Residency {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  price            Int
  userEmail        String
  locationType     Json
  placeType        Json
  mapData          Json
  locationData     Json
  placeSpace       Json
  placeAmeneties   Json
  description      String
  star             Float?
  // owner là khóa ngoại  
  owner            User               @relation("Owner", fields: [userEmail], references: [email])
  Reservations     Reservation[]
  Rating           Rating[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  photos           photos[]
  favResidenciesID favResidenciesID[]
}

model Reservation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  ResidencyId String   @db.ObjectId
  tripInfo    Json
  price       Float
  Status      String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userTrip  User      @relation(fields: [userId], references: [id])
  Residency Residency @relation(fields: [ResidencyId], references: [id])
  Rating    Rating[]
}

model Rating {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ResidencyId   String   @db.ObjectId
  userId        String   @db.ObjectId
  ReservationId String   @db.ObjectId
  stars         Float
  comment       String? // Tùy chọn
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Residency   Residency   @relation(fields: [ResidencyId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [userId], references: [id])
  Reservation Reservation @relation(fields: [ReservationId], references: [id], onDelete: Cascade)
}

model photos {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  ResidencyId String    @db.ObjectId
  public_id   String
  url         String
  Residency   Residency @relation(fields: [ResidencyId], references: [id])
}

model favResidenciesID {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  ResidencyId String    @db.ObjectId
  userId      String    @db.ObjectId
  Residency   Residency @relation(fields: [ResidencyId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
}
