
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Residency
 * 
 */
export type Residency = $Result.DefaultSelection<Prisma.$ResidencyPayload>
/**
 * Model Reservation
 * 
 */
export type Reservation = $Result.DefaultSelection<Prisma.$ReservationPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model photos
 * 
 */
export type photos = $Result.DefaultSelection<Prisma.$photosPayload>
/**
 * Model favResidenciesID
 * 
 */
export type favResidenciesID = $Result.DefaultSelection<Prisma.$favResidenciesIDPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.residency`: Exposes CRUD operations for the **Residency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Residencies
    * const residencies = await prisma.residency.findMany()
    * ```
    */
  get residency(): Prisma.ResidencyDelegate<ExtArgs>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<ExtArgs>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs>;

  /**
   * `prisma.photos`: Exposes CRUD operations for the **photos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photos.findMany()
    * ```
    */
  get photos(): Prisma.photosDelegate<ExtArgs>;

  /**
   * `prisma.favResidenciesID`: Exposes CRUD operations for the **favResidenciesID** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavResidenciesIDS
    * const favResidenciesIDS = await prisma.favResidenciesID.findMany()
    * ```
    */
  get favResidenciesID(): Prisma.favResidenciesIDDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Residency: 'Residency',
    Reservation: 'Reservation',
    Rating: 'Rating',
    photos: 'photos',
    favResidenciesID: 'favResidenciesID'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'residency' | 'reservation' | 'rating' | 'photos' | 'favResidenciesID'
      txIsolationLevel: never
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Residency: {
        payload: Prisma.$ResidencyPayload<ExtArgs>
        fields: Prisma.ResidencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResidencyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResidencyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload>
          }
          findFirst: {
            args: Prisma.ResidencyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResidencyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload>
          }
          findMany: {
            args: Prisma.ResidencyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload>[]
          }
          create: {
            args: Prisma.ResidencyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload>
          }
          createMany: {
            args: Prisma.ResidencyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResidencyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload>
          }
          update: {
            args: Prisma.ResidencyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload>
          }
          deleteMany: {
            args: Prisma.ResidencyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResidencyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResidencyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResidencyPayload>
          }
          aggregate: {
            args: Prisma.ResidencyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResidency>
          }
          groupBy: {
            args: Prisma.ResidencyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResidencyGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ResidencyFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ResidencyAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ResidencyCountArgs<ExtArgs>,
            result: $Utils.Optional<ResidencyCountAggregateOutputType> | number
          }
        }
      }
      Reservation: {
        payload: Prisma.$ReservationPayload<ExtArgs>
        fields: Prisma.ReservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findFirst: {
            args: Prisma.ReservationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findMany: {
            args: Prisma.ReservationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          create: {
            args: Prisma.ReservationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          createMany: {
            args: Prisma.ReservationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReservationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          update: {
            args: Prisma.ReservationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          deleteMany: {
            args: Prisma.ReservationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReservationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.ReservationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReservationFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReservationAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ReservationCountArgs<ExtArgs>,
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RatingFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.RatingAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>,
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      photos: {
        payload: Prisma.$photosPayload<ExtArgs>
        fields: Prisma.photosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.photosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.photosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload>
          }
          findFirst: {
            args: Prisma.photosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.photosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload>
          }
          findMany: {
            args: Prisma.photosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload>[]
          }
          create: {
            args: Prisma.photosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload>
          }
          createMany: {
            args: Prisma.photosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.photosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload>
          }
          update: {
            args: Prisma.photosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload>
          }
          deleteMany: {
            args: Prisma.photosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.photosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.photosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$photosPayload>
          }
          aggregate: {
            args: Prisma.PhotosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePhotos>
          }
          groupBy: {
            args: Prisma.photosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PhotosGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.photosFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.photosAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.photosCountArgs<ExtArgs>,
            result: $Utils.Optional<PhotosCountAggregateOutputType> | number
          }
        }
      }
      favResidenciesID: {
        payload: Prisma.$favResidenciesIDPayload<ExtArgs>
        fields: Prisma.favResidenciesIDFieldRefs
        operations: {
          findUnique: {
            args: Prisma.favResidenciesIDFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.favResidenciesIDFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload>
          }
          findFirst: {
            args: Prisma.favResidenciesIDFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.favResidenciesIDFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload>
          }
          findMany: {
            args: Prisma.favResidenciesIDFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload>[]
          }
          create: {
            args: Prisma.favResidenciesIDCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload>
          }
          createMany: {
            args: Prisma.favResidenciesIDCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.favResidenciesIDDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload>
          }
          update: {
            args: Prisma.favResidenciesIDUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload>
          }
          deleteMany: {
            args: Prisma.favResidenciesIDDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.favResidenciesIDUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.favResidenciesIDUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$favResidenciesIDPayload>
          }
          aggregate: {
            args: Prisma.FavResidenciesIDAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavResidenciesID>
          }
          groupBy: {
            args: Prisma.favResidenciesIDGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavResidenciesIDGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.favResidenciesIDFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.favResidenciesIDAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.favResidenciesIDCountArgs<ExtArgs>,
            result: $Utils.Optional<FavResidenciesIDCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ownedResidencies: number
    Reservations: number
    Rating: number
    favResidenciesID: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedResidencies?: boolean | UserCountOutputTypeCountOwnedResidenciesArgs
    Reservations?: boolean | UserCountOutputTypeCountReservationsArgs
    Rating?: boolean | UserCountOutputTypeCountRatingArgs
    favResidenciesID?: boolean | UserCountOutputTypeCountFavResidenciesIDArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedResidenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResidencyWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavResidenciesIDArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favResidenciesIDWhereInput
  }



  /**
   * Count Type ResidencyCountOutputType
   */

  export type ResidencyCountOutputType = {
    Reservations: number
    Rating: number
    photos: number
    favResidenciesID: number
  }

  export type ResidencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reservations?: boolean | ResidencyCountOutputTypeCountReservationsArgs
    Rating?: boolean | ResidencyCountOutputTypeCountRatingArgs
    photos?: boolean | ResidencyCountOutputTypeCountPhotosArgs
    favResidenciesID?: boolean | ResidencyCountOutputTypeCountFavResidenciesIDArgs
  }

  // Custom InputTypes

  /**
   * ResidencyCountOutputType without action
   */
  export type ResidencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResidencyCountOutputType
     */
    select?: ResidencyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ResidencyCountOutputType without action
   */
  export type ResidencyCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }


  /**
   * ResidencyCountOutputType without action
   */
  export type ResidencyCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * ResidencyCountOutputType without action
   */
  export type ResidencyCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: photosWhereInput
  }


  /**
   * ResidencyCountOutputType without action
   */
  export type ResidencyCountOutputTypeCountFavResidenciesIDArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favResidenciesIDWhereInput
  }



  /**
   * Count Type ReservationCountOutputType
   */

  export type ReservationCountOutputType = {
    Rating: number
  }

  export type ReservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rating?: boolean | ReservationCountOutputTypeCountRatingArgs
  }

  // Custom InputTypes

  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationCountOutputType
     */
    select?: ReservationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    image: number
    bookedVisits: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    image?: true
    bookedVisits?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string | null
    lastName: string | null
    email: string
    password: string
    image: string | null
    bookedVisits: JsonValue[]
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    bookedVisits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownedResidencies?: boolean | User$ownedResidenciesArgs<ExtArgs>
    Reservations?: boolean | User$ReservationsArgs<ExtArgs>
    Rating?: boolean | User$RatingArgs<ExtArgs>
    favResidenciesID?: boolean | User$favResidenciesIDArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    bookedVisits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedResidencies?: boolean | User$ownedResidenciesArgs<ExtArgs>
    Reservations?: boolean | User$ReservationsArgs<ExtArgs>
    Rating?: boolean | User$RatingArgs<ExtArgs>
    favResidenciesID?: boolean | User$favResidenciesIDArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ownedResidencies: Prisma.$ResidencyPayload<ExtArgs>[]
      Reservations: Prisma.$ReservationPayload<ExtArgs>[]
      Rating: Prisma.$RatingPayload<ExtArgs>[]
      favResidenciesID: Prisma.$favResidenciesIDPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string | null
      lastName: string | null
      email: string
      password: string
      image: string | null
      bookedVisits: Prisma.JsonValue[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ownedResidencies<T extends User$ownedResidenciesArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedResidenciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findMany'> | Null>;

    Reservations<T extends User$ReservationsArgs<ExtArgs> = {}>(args?: Subset<T, User$ReservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Rating<T extends User$RatingArgs<ExtArgs> = {}>(args?: Subset<T, User$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    favResidenciesID<T extends User$favResidenciesIDArgs<ExtArgs> = {}>(args?: Subset<T, User$favResidenciesIDArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly bookedVisits: FieldRef<"User", 'Json[]'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User.ownedResidencies
   */
  export type User$ownedResidenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    where?: ResidencyWhereInput
    orderBy?: ResidencyOrderByWithRelationInput | ResidencyOrderByWithRelationInput[]
    cursor?: ResidencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResidencyScalarFieldEnum | ResidencyScalarFieldEnum[]
  }


  /**
   * User.Reservations
   */
  export type User$ReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * User.Rating
   */
  export type User$RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * User.favResidenciesID
   */
  export type User$favResidenciesIDArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    where?: favResidenciesIDWhereInput
    orderBy?: favResidenciesIDOrderByWithRelationInput | favResidenciesIDOrderByWithRelationInput[]
    cursor?: favResidenciesIDWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavResidenciesIDScalarFieldEnum | FavResidenciesIDScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Residency
   */

  export type AggregateResidency = {
    _count: ResidencyCountAggregateOutputType | null
    _avg: ResidencyAvgAggregateOutputType | null
    _sum: ResidencySumAggregateOutputType | null
    _min: ResidencyMinAggregateOutputType | null
    _max: ResidencyMaxAggregateOutputType | null
  }

  export type ResidencyAvgAggregateOutputType = {
    price: number | null
    star: number | null
  }

  export type ResidencySumAggregateOutputType = {
    price: number | null
    star: number | null
  }

  export type ResidencyMinAggregateOutputType = {
    id: string | null
    title: string | null
    price: number | null
    userEmail: string | null
    description: string | null
    star: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResidencyMaxAggregateOutputType = {
    id: string | null
    title: string | null
    price: number | null
    userEmail: string | null
    description: string | null
    star: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResidencyCountAggregateOutputType = {
    id: number
    title: number
    price: number
    userEmail: number
    locationType: number
    placeType: number
    mapData: number
    locationData: number
    placeSpace: number
    placeAmeneties: number
    description: number
    star: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResidencyAvgAggregateInputType = {
    price?: true
    star?: true
  }

  export type ResidencySumAggregateInputType = {
    price?: true
    star?: true
  }

  export type ResidencyMinAggregateInputType = {
    id?: true
    title?: true
    price?: true
    userEmail?: true
    description?: true
    star?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResidencyMaxAggregateInputType = {
    id?: true
    title?: true
    price?: true
    userEmail?: true
    description?: true
    star?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResidencyCountAggregateInputType = {
    id?: true
    title?: true
    price?: true
    userEmail?: true
    locationType?: true
    placeType?: true
    mapData?: true
    locationData?: true
    placeSpace?: true
    placeAmeneties?: true
    description?: true
    star?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResidencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Residency to aggregate.
     */
    where?: ResidencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Residencies to fetch.
     */
    orderBy?: ResidencyOrderByWithRelationInput | ResidencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResidencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Residencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Residencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Residencies
    **/
    _count?: true | ResidencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResidencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResidencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResidencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResidencyMaxAggregateInputType
  }

  export type GetResidencyAggregateType<T extends ResidencyAggregateArgs> = {
        [P in keyof T & keyof AggregateResidency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResidency[P]>
      : GetScalarType<T[P], AggregateResidency[P]>
  }




  export type ResidencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResidencyWhereInput
    orderBy?: ResidencyOrderByWithAggregationInput | ResidencyOrderByWithAggregationInput[]
    by: ResidencyScalarFieldEnum[] | ResidencyScalarFieldEnum
    having?: ResidencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResidencyCountAggregateInputType | true
    _avg?: ResidencyAvgAggregateInputType
    _sum?: ResidencySumAggregateInputType
    _min?: ResidencyMinAggregateInputType
    _max?: ResidencyMaxAggregateInputType
  }

  export type ResidencyGroupByOutputType = {
    id: string
    title: string
    price: number
    userEmail: string
    locationType: JsonValue
    placeType: JsonValue
    mapData: JsonValue
    locationData: JsonValue
    placeSpace: JsonValue
    placeAmeneties: JsonValue
    description: string
    star: number | null
    createdAt: Date
    updatedAt: Date
    _count: ResidencyCountAggregateOutputType | null
    _avg: ResidencyAvgAggregateOutputType | null
    _sum: ResidencySumAggregateOutputType | null
    _min: ResidencyMinAggregateOutputType | null
    _max: ResidencyMaxAggregateOutputType | null
  }

  type GetResidencyGroupByPayload<T extends ResidencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResidencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResidencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResidencyGroupByOutputType[P]>
            : GetScalarType<T[P], ResidencyGroupByOutputType[P]>
        }
      >
    >


  export type ResidencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    price?: boolean
    userEmail?: boolean
    locationType?: boolean
    placeType?: boolean
    mapData?: boolean
    locationData?: boolean
    placeSpace?: boolean
    placeAmeneties?: boolean
    description?: boolean
    star?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    Reservations?: boolean | Residency$ReservationsArgs<ExtArgs>
    Rating?: boolean | Residency$RatingArgs<ExtArgs>
    photos?: boolean | Residency$photosArgs<ExtArgs>
    favResidenciesID?: boolean | Residency$favResidenciesIDArgs<ExtArgs>
    _count?: boolean | ResidencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["residency"]>

  export type ResidencySelectScalar = {
    id?: boolean
    title?: boolean
    price?: boolean
    userEmail?: boolean
    locationType?: boolean
    placeType?: boolean
    mapData?: boolean
    locationData?: boolean
    placeSpace?: boolean
    placeAmeneties?: boolean
    description?: boolean
    star?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ResidencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    Reservations?: boolean | Residency$ReservationsArgs<ExtArgs>
    Rating?: boolean | Residency$RatingArgs<ExtArgs>
    photos?: boolean | Residency$photosArgs<ExtArgs>
    favResidenciesID?: boolean | Residency$favResidenciesIDArgs<ExtArgs>
    _count?: boolean | ResidencyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ResidencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Residency"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      Reservations: Prisma.$ReservationPayload<ExtArgs>[]
      Rating: Prisma.$RatingPayload<ExtArgs>[]
      photos: Prisma.$photosPayload<ExtArgs>[]
      favResidenciesID: Prisma.$favResidenciesIDPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      price: number
      userEmail: string
      locationType: Prisma.JsonValue
      placeType: Prisma.JsonValue
      mapData: Prisma.JsonValue
      locationData: Prisma.JsonValue
      placeSpace: Prisma.JsonValue
      placeAmeneties: Prisma.JsonValue
      description: string
      star: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["residency"]>
    composites: {}
  }


  type ResidencyGetPayload<S extends boolean | null | undefined | ResidencyDefaultArgs> = $Result.GetResult<Prisma.$ResidencyPayload, S>

  type ResidencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResidencyFindManyArgs, 'select' | 'include'> & {
      select?: ResidencyCountAggregateInputType | true
    }

  export interface ResidencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Residency'], meta: { name: 'Residency' } }
    /**
     * Find zero or one Residency that matches the filter.
     * @param {ResidencyFindUniqueArgs} args - Arguments to find a Residency
     * @example
     * // Get one Residency
     * const residency = await prisma.residency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResidencyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResidencyFindUniqueArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Residency that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResidencyFindUniqueOrThrowArgs} args - Arguments to find a Residency
     * @example
     * // Get one Residency
     * const residency = await prisma.residency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResidencyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResidencyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Residency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResidencyFindFirstArgs} args - Arguments to find a Residency
     * @example
     * // Get one Residency
     * const residency = await prisma.residency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResidencyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResidencyFindFirstArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Residency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResidencyFindFirstOrThrowArgs} args - Arguments to find a Residency
     * @example
     * // Get one Residency
     * const residency = await prisma.residency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResidencyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResidencyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Residencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResidencyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Residencies
     * const residencies = await prisma.residency.findMany()
     * 
     * // Get first 10 Residencies
     * const residencies = await prisma.residency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const residencyWithIdOnly = await prisma.residency.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResidencyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResidencyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Residency.
     * @param {ResidencyCreateArgs} args - Arguments to create a Residency.
     * @example
     * // Create one Residency
     * const Residency = await prisma.residency.create({
     *   data: {
     *     // ... data to create a Residency
     *   }
     * })
     * 
    **/
    create<T extends ResidencyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResidencyCreateArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Residencies.
     *     @param {ResidencyCreateManyArgs} args - Arguments to create many Residencies.
     *     @example
     *     // Create many Residencies
     *     const residency = await prisma.residency.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResidencyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResidencyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Residency.
     * @param {ResidencyDeleteArgs} args - Arguments to delete one Residency.
     * @example
     * // Delete one Residency
     * const Residency = await prisma.residency.delete({
     *   where: {
     *     // ... filter to delete one Residency
     *   }
     * })
     * 
    **/
    delete<T extends ResidencyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResidencyDeleteArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Residency.
     * @param {ResidencyUpdateArgs} args - Arguments to update one Residency.
     * @example
     * // Update one Residency
     * const residency = await prisma.residency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResidencyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResidencyUpdateArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Residencies.
     * @param {ResidencyDeleteManyArgs} args - Arguments to filter Residencies to delete.
     * @example
     * // Delete a few Residencies
     * const { count } = await prisma.residency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResidencyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResidencyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Residencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResidencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Residencies
     * const residency = await prisma.residency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResidencyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResidencyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Residency.
     * @param {ResidencyUpsertArgs} args - Arguments to update or create a Residency.
     * @example
     * // Update or create a Residency
     * const residency = await prisma.residency.upsert({
     *   create: {
     *     // ... data to create a Residency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Residency we want to update
     *   }
     * })
    **/
    upsert<T extends ResidencyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResidencyUpsertArgs<ExtArgs>>
    ): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Residencies that matches the filter.
     * @param {ResidencyFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const residency = await prisma.residency.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ResidencyFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Residency.
     * @param {ResidencyAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const residency = await prisma.residency.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ResidencyAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Residencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResidencyCountArgs} args - Arguments to filter Residencies to count.
     * @example
     * // Count the number of Residencies
     * const count = await prisma.residency.count({
     *   where: {
     *     // ... the filter for the Residencies we want to count
     *   }
     * })
    **/
    count<T extends ResidencyCountArgs>(
      args?: Subset<T, ResidencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResidencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Residency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResidencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResidencyAggregateArgs>(args: Subset<T, ResidencyAggregateArgs>): Prisma.PrismaPromise<GetResidencyAggregateType<T>>

    /**
     * Group by Residency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResidencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResidencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResidencyGroupByArgs['orderBy'] }
        : { orderBy?: ResidencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResidencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResidencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Residency model
   */
  readonly fields: ResidencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Residency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResidencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Reservations<T extends Residency$ReservationsArgs<ExtArgs> = {}>(args?: Subset<T, Residency$ReservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Rating<T extends Residency$RatingArgs<ExtArgs> = {}>(args?: Subset<T, Residency$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    photos<T extends Residency$photosArgs<ExtArgs> = {}>(args?: Subset<T, Residency$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'findMany'> | Null>;

    favResidenciesID<T extends Residency$favResidenciesIDArgs<ExtArgs> = {}>(args?: Subset<T, Residency$favResidenciesIDArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Residency model
   */ 
  interface ResidencyFieldRefs {
    readonly id: FieldRef<"Residency", 'String'>
    readonly title: FieldRef<"Residency", 'String'>
    readonly price: FieldRef<"Residency", 'Int'>
    readonly userEmail: FieldRef<"Residency", 'String'>
    readonly locationType: FieldRef<"Residency", 'Json'>
    readonly placeType: FieldRef<"Residency", 'Json'>
    readonly mapData: FieldRef<"Residency", 'Json'>
    readonly locationData: FieldRef<"Residency", 'Json'>
    readonly placeSpace: FieldRef<"Residency", 'Json'>
    readonly placeAmeneties: FieldRef<"Residency", 'Json'>
    readonly description: FieldRef<"Residency", 'String'>
    readonly star: FieldRef<"Residency", 'Float'>
    readonly createdAt: FieldRef<"Residency", 'DateTime'>
    readonly updatedAt: FieldRef<"Residency", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Residency findUnique
   */
  export type ResidencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * Filter, which Residency to fetch.
     */
    where: ResidencyWhereUniqueInput
  }


  /**
   * Residency findUniqueOrThrow
   */
  export type ResidencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * Filter, which Residency to fetch.
     */
    where: ResidencyWhereUniqueInput
  }


  /**
   * Residency findFirst
   */
  export type ResidencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * Filter, which Residency to fetch.
     */
    where?: ResidencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Residencies to fetch.
     */
    orderBy?: ResidencyOrderByWithRelationInput | ResidencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Residencies.
     */
    cursor?: ResidencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Residencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Residencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Residencies.
     */
    distinct?: ResidencyScalarFieldEnum | ResidencyScalarFieldEnum[]
  }


  /**
   * Residency findFirstOrThrow
   */
  export type ResidencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * Filter, which Residency to fetch.
     */
    where?: ResidencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Residencies to fetch.
     */
    orderBy?: ResidencyOrderByWithRelationInput | ResidencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Residencies.
     */
    cursor?: ResidencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Residencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Residencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Residencies.
     */
    distinct?: ResidencyScalarFieldEnum | ResidencyScalarFieldEnum[]
  }


  /**
   * Residency findMany
   */
  export type ResidencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * Filter, which Residencies to fetch.
     */
    where?: ResidencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Residencies to fetch.
     */
    orderBy?: ResidencyOrderByWithRelationInput | ResidencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Residencies.
     */
    cursor?: ResidencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Residencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Residencies.
     */
    skip?: number
    distinct?: ResidencyScalarFieldEnum | ResidencyScalarFieldEnum[]
  }


  /**
   * Residency create
   */
  export type ResidencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Residency.
     */
    data: XOR<ResidencyCreateInput, ResidencyUncheckedCreateInput>
  }


  /**
   * Residency createMany
   */
  export type ResidencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Residencies.
     */
    data: ResidencyCreateManyInput | ResidencyCreateManyInput[]
  }


  /**
   * Residency update
   */
  export type ResidencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Residency.
     */
    data: XOR<ResidencyUpdateInput, ResidencyUncheckedUpdateInput>
    /**
     * Choose, which Residency to update.
     */
    where: ResidencyWhereUniqueInput
  }


  /**
   * Residency updateMany
   */
  export type ResidencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Residencies.
     */
    data: XOR<ResidencyUpdateManyMutationInput, ResidencyUncheckedUpdateManyInput>
    /**
     * Filter which Residencies to update
     */
    where?: ResidencyWhereInput
  }


  /**
   * Residency upsert
   */
  export type ResidencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Residency to update in case it exists.
     */
    where: ResidencyWhereUniqueInput
    /**
     * In case the Residency found by the `where` argument doesn't exist, create a new Residency with this data.
     */
    create: XOR<ResidencyCreateInput, ResidencyUncheckedCreateInput>
    /**
     * In case the Residency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResidencyUpdateInput, ResidencyUncheckedUpdateInput>
  }


  /**
   * Residency delete
   */
  export type ResidencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
    /**
     * Filter which Residency to delete.
     */
    where: ResidencyWhereUniqueInput
  }


  /**
   * Residency deleteMany
   */
  export type ResidencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Residencies to delete
     */
    where?: ResidencyWhereInput
  }


  /**
   * Residency findRaw
   */
  export type ResidencyFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Residency aggregateRaw
   */
  export type ResidencyAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Residency.Reservations
   */
  export type Residency$ReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Residency.Rating
   */
  export type Residency$RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Residency.photos
   */
  export type Residency$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    where?: photosWhereInput
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    cursor?: photosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * Residency.favResidenciesID
   */
  export type Residency$favResidenciesIDArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    where?: favResidenciesIDWhereInput
    orderBy?: favResidenciesIDOrderByWithRelationInput | favResidenciesIDOrderByWithRelationInput[]
    cursor?: favResidenciesIDWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavResidenciesIDScalarFieldEnum | FavResidenciesIDScalarFieldEnum[]
  }


  /**
   * Residency without action
   */
  export type ResidencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Residency
     */
    select?: ResidencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResidencyInclude<ExtArgs> | null
  }



  /**
   * Model Reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationAvgAggregateOutputType = {
    price: number | null
  }

  export type ReservationSumAggregateOutputType = {
    price: number | null
  }

  export type ReservationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    ResidencyId: string | null
    price: number | null
    Status: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReservationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    ResidencyId: string | null
    price: number | null
    Status: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReservationCountAggregateOutputType = {
    id: number
    userId: number
    ResidencyId: number
    tripInfo: number
    price: number
    Status: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReservationAvgAggregateInputType = {
    price?: true
  }

  export type ReservationSumAggregateInputType = {
    price?: true
  }

  export type ReservationMinAggregateInputType = {
    id?: true
    userId?: true
    ResidencyId?: true
    price?: true
    Status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReservationMaxAggregateInputType = {
    id?: true
    userId?: true
    ResidencyId?: true
    price?: true
    Status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReservationCountAggregateInputType = {
    id?: true
    userId?: true
    ResidencyId?: true
    tripInfo?: true
    price?: true
    Status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservation to aggregate.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithAggregationInput | ReservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _avg?: ReservationAvgAggregateInputType
    _sum?: ReservationSumAggregateInputType
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    id: string
    userId: string
    ResidencyId: string
    tripInfo: JsonValue
    price: number
    Status: string
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ResidencyId?: boolean
    tripInfo?: boolean
    price?: boolean
    Status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userTrip?: boolean | UserDefaultArgs<ExtArgs>
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
    Rating?: boolean | Reservation$RatingArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectScalar = {
    id?: boolean
    userId?: boolean
    ResidencyId?: boolean
    tripInfo?: boolean
    price?: boolean
    Status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userTrip?: boolean | UserDefaultArgs<ExtArgs>
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
    Rating?: boolean | Reservation$RatingArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ReservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reservation"
    objects: {
      userTrip: Prisma.$UserPayload<ExtArgs>
      Residency: Prisma.$ResidencyPayload<ExtArgs>
      Rating: Prisma.$RatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      ResidencyId: string
      tripInfo: Prisma.JsonValue
      price: number
      Status: string
      startDate: Date
      endDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }


  type ReservationGetPayload<S extends boolean | null | undefined | ReservationDefaultArgs> = $Result.GetResult<Prisma.$ReservationPayload, S>

  type ReservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReservationFindManyArgs, 'select' | 'include'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface ReservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservation'], meta: { name: 'Reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationFindUniqueArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reservation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationWithIdOnly = await prisma.reservation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReservationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
    **/
    create<T extends ReservationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationCreateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reservations.
     *     @param {ReservationCreateManyArgs} args - Arguments to create many Reservations.
     *     @example
     *     // Create many Reservations
     *     const reservation = await prisma.reservation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReservationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
    **/
    delete<T extends ReservationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationDeleteArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
    **/
    upsert<T extends ReservationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpsertArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * @param {ReservationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const reservation = await prisma.reservation.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ReservationFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Reservation.
     * @param {ReservationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const reservation = await prisma.reservation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ReservationAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reservation model
   */
  readonly fields: ReservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userTrip<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Residency<T extends ResidencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResidencyDefaultArgs<ExtArgs>>): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Rating<T extends Reservation$RatingArgs<ExtArgs> = {}>(args?: Subset<T, Reservation$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reservation model
   */ 
  interface ReservationFieldRefs {
    readonly id: FieldRef<"Reservation", 'String'>
    readonly userId: FieldRef<"Reservation", 'String'>
    readonly ResidencyId: FieldRef<"Reservation", 'String'>
    readonly tripInfo: FieldRef<"Reservation", 'Json'>
    readonly price: FieldRef<"Reservation", 'Float'>
    readonly Status: FieldRef<"Reservation", 'String'>
    readonly startDate: FieldRef<"Reservation", 'DateTime'>
    readonly endDate: FieldRef<"Reservation", 'DateTime'>
    readonly createdAt: FieldRef<"Reservation", 'DateTime'>
    readonly updatedAt: FieldRef<"Reservation", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findUniqueOrThrow
   */
  export type ReservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findFirstOrThrow
   */
  export type ReservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservations to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation create
   */
  export type ReservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservation.
     */
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }


  /**
   * Reservation createMany
   */
  export type ReservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
  }


  /**
   * Reservation update
   */
  export type ReservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservation.
     */
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     */
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     */
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }


  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter which Reservation to delete.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservations to delete
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation findRaw
   */
  export type ReservationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Reservation aggregateRaw
   */
  export type ReservationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Reservation.Rating
   */
  export type Reservation$RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Reservation without action
   */
  export type ReservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
  }



  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    stars: number | null
  }

  export type RatingSumAggregateOutputType = {
    stars: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    ResidencyId: string | null
    userId: string | null
    ReservationId: string | null
    stars: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    ResidencyId: string | null
    userId: string | null
    ReservationId: string | null
    stars: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    ResidencyId: number
    userId: number
    ReservationId: number
    stars: number
    comment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    stars?: true
  }

  export type RatingSumAggregateInputType = {
    stars?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    ResidencyId?: true
    userId?: true
    ReservationId?: true
    stars?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    ResidencyId?: true
    userId?: true
    ReservationId?: true
    stars?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    ResidencyId?: true
    userId?: true
    ReservationId?: true
    stars?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: string
    ResidencyId: string
    userId: string
    ReservationId: string
    stars: number
    comment: string | null
    createdAt: Date
    updatedAt: Date
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ResidencyId?: boolean
    userId?: boolean
    ReservationId?: boolean
    stars?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectScalar = {
    id?: boolean
    ResidencyId?: boolean
    userId?: boolean
    ReservationId?: boolean
    stars?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    Reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }


  export type $RatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      Residency: Prisma.$ResidencyPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
      Reservation: Prisma.$ReservationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ResidencyId: string
      userId: string
      ReservationId: string
      stars: number
      comment: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }


  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RatingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rating that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RatingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RatingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends RatingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingCreateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ratings.
     *     @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     *     @example
     *     // Create many Ratings
     *     const rating = await prisma.rating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RatingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends RatingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RatingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RatingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RatingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends RatingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * @param {RatingFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const rating = await prisma.rating.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: RatingFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Rating.
     * @param {RatingAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const rating = await prisma.rating.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: RatingAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Residency<T extends ResidencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResidencyDefaultArgs<ExtArgs>>): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Reservation<T extends ReservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReservationDefaultArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rating model
   */ 
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'String'>
    readonly ResidencyId: FieldRef<"Rating", 'String'>
    readonly userId: FieldRef<"Rating", 'String'>
    readonly ReservationId: FieldRef<"Rating", 'String'>
    readonly stars: FieldRef<"Rating", 'Float'>
    readonly comment: FieldRef<"Rating", 'String'>
    readonly createdAt: FieldRef<"Rating", 'DateTime'>
    readonly updatedAt: FieldRef<"Rating", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }


  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
  }


  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }


  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }


  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }


  /**
   * Rating findRaw
   */
  export type RatingFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Rating aggregateRaw
   */
  export type RatingAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
  }



  /**
   * Model photos
   */

  export type AggregatePhotos = {
    _count: PhotosCountAggregateOutputType | null
    _min: PhotosMinAggregateOutputType | null
    _max: PhotosMaxAggregateOutputType | null
  }

  export type PhotosMinAggregateOutputType = {
    id: string | null
    ResidencyId: string | null
    public_id: string | null
    url: string | null
  }

  export type PhotosMaxAggregateOutputType = {
    id: string | null
    ResidencyId: string | null
    public_id: string | null
    url: string | null
  }

  export type PhotosCountAggregateOutputType = {
    id: number
    ResidencyId: number
    public_id: number
    url: number
    _all: number
  }


  export type PhotosMinAggregateInputType = {
    id?: true
    ResidencyId?: true
    public_id?: true
    url?: true
  }

  export type PhotosMaxAggregateInputType = {
    id?: true
    ResidencyId?: true
    public_id?: true
    url?: true
  }

  export type PhotosCountAggregateInputType = {
    id?: true
    ResidencyId?: true
    public_id?: true
    url?: true
    _all?: true
  }

  export type PhotosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which photos to aggregate.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned photos
    **/
    _count?: true | PhotosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhotosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhotosMaxAggregateInputType
  }

  export type GetPhotosAggregateType<T extends PhotosAggregateArgs> = {
        [P in keyof T & keyof AggregatePhotos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhotos[P]>
      : GetScalarType<T[P], AggregatePhotos[P]>
  }




  export type photosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: photosWhereInput
    orderBy?: photosOrderByWithAggregationInput | photosOrderByWithAggregationInput[]
    by: PhotosScalarFieldEnum[] | PhotosScalarFieldEnum
    having?: photosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhotosCountAggregateInputType | true
    _min?: PhotosMinAggregateInputType
    _max?: PhotosMaxAggregateInputType
  }

  export type PhotosGroupByOutputType = {
    id: string
    ResidencyId: string
    public_id: string
    url: string
    _count: PhotosCountAggregateOutputType | null
    _min: PhotosMinAggregateOutputType | null
    _max: PhotosMaxAggregateOutputType | null
  }

  type GetPhotosGroupByPayload<T extends photosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhotosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhotosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhotosGroupByOutputType[P]>
            : GetScalarType<T[P], PhotosGroupByOutputType[P]>
        }
      >
    >


  export type photosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ResidencyId?: boolean
    public_id?: boolean
    url?: boolean
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photos"]>

  export type photosSelectScalar = {
    id?: boolean
    ResidencyId?: boolean
    public_id?: boolean
    url?: boolean
  }

  export type photosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
  }


  export type $photosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "photos"
    objects: {
      Residency: Prisma.$ResidencyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ResidencyId: string
      public_id: string
      url: string
    }, ExtArgs["result"]["photos"]>
    composites: {}
  }


  type photosGetPayload<S extends boolean | null | undefined | photosDefaultArgs> = $Result.GetResult<Prisma.$photosPayload, S>

  type photosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<photosFindManyArgs, 'select' | 'include'> & {
      select?: PhotosCountAggregateInputType | true
    }

  export interface photosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['photos'], meta: { name: 'photos' } }
    /**
     * Find zero or one Photos that matches the filter.
     * @param {photosFindUniqueArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends photosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, photosFindUniqueArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Photos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {photosFindUniqueOrThrowArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends photosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosFindFirstArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends photosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindFirstArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Photos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosFindFirstOrThrowArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends photosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photos.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photosWithIdOnly = await prisma.photos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends photosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Photos.
     * @param {photosCreateArgs} args - Arguments to create a Photos.
     * @example
     * // Create one Photos
     * const Photos = await prisma.photos.create({
     *   data: {
     *     // ... data to create a Photos
     *   }
     * })
     * 
    **/
    create<T extends photosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, photosCreateArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Photos.
     *     @param {photosCreateManyArgs} args - Arguments to create many Photos.
     *     @example
     *     // Create many Photos
     *     const photos = await prisma.photos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends photosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, photosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Photos.
     * @param {photosDeleteArgs} args - Arguments to delete one Photos.
     * @example
     * // Delete one Photos
     * const Photos = await prisma.photos.delete({
     *   where: {
     *     // ... filter to delete one Photos
     *   }
     * })
     * 
    **/
    delete<T extends photosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, photosDeleteArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Photos.
     * @param {photosUpdateArgs} args - Arguments to update one Photos.
     * @example
     * // Update one Photos
     * const photos = await prisma.photos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends photosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, photosUpdateArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Photos.
     * @param {photosDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends photosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, photosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photos = await prisma.photos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends photosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, photosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Photos.
     * @param {photosUpsertArgs} args - Arguments to update or create a Photos.
     * @example
     * // Update or create a Photos
     * const photos = await prisma.photos.upsert({
     *   create: {
     *     // ... data to create a Photos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photos we want to update
     *   }
     * })
    **/
    upsert<T extends photosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, photosUpsertArgs<ExtArgs>>
    ): Prisma__photosClient<$Result.GetResult<Prisma.$photosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Photos that matches the filter.
     * @param {photosFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const photos = await prisma.photos.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: photosFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Photos.
     * @param {photosAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const photos = await prisma.photos.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: photosAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosCountArgs} args - Arguments to filter Photos to count.
     * @example
     * // Count the number of Photos
     * const count = await prisma.photos.count({
     *   where: {
     *     // ... the filter for the Photos we want to count
     *   }
     * })
    **/
    count<T extends photosCountArgs>(
      args?: Subset<T, photosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhotosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhotosAggregateArgs>(args: Subset<T, PhotosAggregateArgs>): Prisma.PrismaPromise<GetPhotosAggregateType<T>>

    /**
     * Group by Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends photosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: photosGroupByArgs['orderBy'] }
        : { orderBy?: photosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, photosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhotosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the photos model
   */
  readonly fields: photosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for photos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__photosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Residency<T extends ResidencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResidencyDefaultArgs<ExtArgs>>): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the photos model
   */ 
  interface photosFieldRefs {
    readonly id: FieldRef<"photos", 'String'>
    readonly ResidencyId: FieldRef<"photos", 'String'>
    readonly public_id: FieldRef<"photos", 'String'>
    readonly url: FieldRef<"photos", 'String'>
  }
    

  // Custom InputTypes

  /**
   * photos findUnique
   */
  export type photosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos findUniqueOrThrow
   */
  export type photosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos findFirst
   */
  export type photosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for photos.
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of photos.
     */
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * photos findFirstOrThrow
   */
  export type photosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for photos.
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of photos.
     */
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * photos findMany
   */
  export type photosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing photos.
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * photos create
   */
  export type photosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * The data needed to create a photos.
     */
    data: XOR<photosCreateInput, photosUncheckedCreateInput>
  }


  /**
   * photos createMany
   */
  export type photosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many photos.
     */
    data: photosCreateManyInput | photosCreateManyInput[]
  }


  /**
   * photos update
   */
  export type photosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * The data needed to update a photos.
     */
    data: XOR<photosUpdateInput, photosUncheckedUpdateInput>
    /**
     * Choose, which photos to update.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos updateMany
   */
  export type photosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update photos.
     */
    data: XOR<photosUpdateManyMutationInput, photosUncheckedUpdateManyInput>
    /**
     * Filter which photos to update
     */
    where?: photosWhereInput
  }


  /**
   * photos upsert
   */
  export type photosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * The filter to search for the photos to update in case it exists.
     */
    where: photosWhereUniqueInput
    /**
     * In case the photos found by the `where` argument doesn't exist, create a new photos with this data.
     */
    create: XOR<photosCreateInput, photosUncheckedCreateInput>
    /**
     * In case the photos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<photosUpdateInput, photosUncheckedUpdateInput>
  }


  /**
   * photos delete
   */
  export type photosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter which photos to delete.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos deleteMany
   */
  export type photosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which photos to delete
     */
    where?: photosWhereInput
  }


  /**
   * photos findRaw
   */
  export type photosFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * photos aggregateRaw
   */
  export type photosAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * photos without action
   */
  export type photosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
  }



  /**
   * Model favResidenciesID
   */

  export type AggregateFavResidenciesID = {
    _count: FavResidenciesIDCountAggregateOutputType | null
    _min: FavResidenciesIDMinAggregateOutputType | null
    _max: FavResidenciesIDMaxAggregateOutputType | null
  }

  export type FavResidenciesIDMinAggregateOutputType = {
    id: string | null
    ResidencyId: string | null
    userId: string | null
  }

  export type FavResidenciesIDMaxAggregateOutputType = {
    id: string | null
    ResidencyId: string | null
    userId: string | null
  }

  export type FavResidenciesIDCountAggregateOutputType = {
    id: number
    ResidencyId: number
    userId: number
    _all: number
  }


  export type FavResidenciesIDMinAggregateInputType = {
    id?: true
    ResidencyId?: true
    userId?: true
  }

  export type FavResidenciesIDMaxAggregateInputType = {
    id?: true
    ResidencyId?: true
    userId?: true
  }

  export type FavResidenciesIDCountAggregateInputType = {
    id?: true
    ResidencyId?: true
    userId?: true
    _all?: true
  }

  export type FavResidenciesIDAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favResidenciesID to aggregate.
     */
    where?: favResidenciesIDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favResidenciesIDS to fetch.
     */
    orderBy?: favResidenciesIDOrderByWithRelationInput | favResidenciesIDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: favResidenciesIDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favResidenciesIDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favResidenciesIDS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned favResidenciesIDS
    **/
    _count?: true | FavResidenciesIDCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavResidenciesIDMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavResidenciesIDMaxAggregateInputType
  }

  export type GetFavResidenciesIDAggregateType<T extends FavResidenciesIDAggregateArgs> = {
        [P in keyof T & keyof AggregateFavResidenciesID]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavResidenciesID[P]>
      : GetScalarType<T[P], AggregateFavResidenciesID[P]>
  }




  export type favResidenciesIDGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favResidenciesIDWhereInput
    orderBy?: favResidenciesIDOrderByWithAggregationInput | favResidenciesIDOrderByWithAggregationInput[]
    by: FavResidenciesIDScalarFieldEnum[] | FavResidenciesIDScalarFieldEnum
    having?: favResidenciesIDScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavResidenciesIDCountAggregateInputType | true
    _min?: FavResidenciesIDMinAggregateInputType
    _max?: FavResidenciesIDMaxAggregateInputType
  }

  export type FavResidenciesIDGroupByOutputType = {
    id: string
    ResidencyId: string
    userId: string
    _count: FavResidenciesIDCountAggregateOutputType | null
    _min: FavResidenciesIDMinAggregateOutputType | null
    _max: FavResidenciesIDMaxAggregateOutputType | null
  }

  type GetFavResidenciesIDGroupByPayload<T extends favResidenciesIDGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavResidenciesIDGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavResidenciesIDGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavResidenciesIDGroupByOutputType[P]>
            : GetScalarType<T[P], FavResidenciesIDGroupByOutputType[P]>
        }
      >
    >


  export type favResidenciesIDSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ResidencyId?: boolean
    userId?: boolean
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favResidenciesID"]>

  export type favResidenciesIDSelectScalar = {
    id?: boolean
    ResidencyId?: boolean
    userId?: boolean
  }

  export type favResidenciesIDInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Residency?: boolean | ResidencyDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $favResidenciesIDPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "favResidenciesID"
    objects: {
      Residency: Prisma.$ResidencyPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ResidencyId: string
      userId: string
    }, ExtArgs["result"]["favResidenciesID"]>
    composites: {}
  }


  type favResidenciesIDGetPayload<S extends boolean | null | undefined | favResidenciesIDDefaultArgs> = $Result.GetResult<Prisma.$favResidenciesIDPayload, S>

  type favResidenciesIDCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<favResidenciesIDFindManyArgs, 'select' | 'include'> & {
      select?: FavResidenciesIDCountAggregateInputType | true
    }

  export interface favResidenciesIDDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['favResidenciesID'], meta: { name: 'favResidenciesID' } }
    /**
     * Find zero or one FavResidenciesID that matches the filter.
     * @param {favResidenciesIDFindUniqueArgs} args - Arguments to find a FavResidenciesID
     * @example
     * // Get one FavResidenciesID
     * const favResidenciesID = await prisma.favResidenciesID.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends favResidenciesIDFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, favResidenciesIDFindUniqueArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FavResidenciesID that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {favResidenciesIDFindUniqueOrThrowArgs} args - Arguments to find a FavResidenciesID
     * @example
     * // Get one FavResidenciesID
     * const favResidenciesID = await prisma.favResidenciesID.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends favResidenciesIDFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, favResidenciesIDFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FavResidenciesID that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favResidenciesIDFindFirstArgs} args - Arguments to find a FavResidenciesID
     * @example
     * // Get one FavResidenciesID
     * const favResidenciesID = await prisma.favResidenciesID.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends favResidenciesIDFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, favResidenciesIDFindFirstArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FavResidenciesID that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favResidenciesIDFindFirstOrThrowArgs} args - Arguments to find a FavResidenciesID
     * @example
     * // Get one FavResidenciesID
     * const favResidenciesID = await prisma.favResidenciesID.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends favResidenciesIDFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, favResidenciesIDFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FavResidenciesIDS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favResidenciesIDFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavResidenciesIDS
     * const favResidenciesIDS = await prisma.favResidenciesID.findMany()
     * 
     * // Get first 10 FavResidenciesIDS
     * const favResidenciesIDS = await prisma.favResidenciesID.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favResidenciesIDWithIdOnly = await prisma.favResidenciesID.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends favResidenciesIDFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, favResidenciesIDFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FavResidenciesID.
     * @param {favResidenciesIDCreateArgs} args - Arguments to create a FavResidenciesID.
     * @example
     * // Create one FavResidenciesID
     * const FavResidenciesID = await prisma.favResidenciesID.create({
     *   data: {
     *     // ... data to create a FavResidenciesID
     *   }
     * })
     * 
    **/
    create<T extends favResidenciesIDCreateArgs<ExtArgs>>(
      args: SelectSubset<T, favResidenciesIDCreateArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FavResidenciesIDS.
     *     @param {favResidenciesIDCreateManyArgs} args - Arguments to create many FavResidenciesIDS.
     *     @example
     *     // Create many FavResidenciesIDS
     *     const favResidenciesID = await prisma.favResidenciesID.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends favResidenciesIDCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, favResidenciesIDCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FavResidenciesID.
     * @param {favResidenciesIDDeleteArgs} args - Arguments to delete one FavResidenciesID.
     * @example
     * // Delete one FavResidenciesID
     * const FavResidenciesID = await prisma.favResidenciesID.delete({
     *   where: {
     *     // ... filter to delete one FavResidenciesID
     *   }
     * })
     * 
    **/
    delete<T extends favResidenciesIDDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, favResidenciesIDDeleteArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FavResidenciesID.
     * @param {favResidenciesIDUpdateArgs} args - Arguments to update one FavResidenciesID.
     * @example
     * // Update one FavResidenciesID
     * const favResidenciesID = await prisma.favResidenciesID.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends favResidenciesIDUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, favResidenciesIDUpdateArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FavResidenciesIDS.
     * @param {favResidenciesIDDeleteManyArgs} args - Arguments to filter FavResidenciesIDS to delete.
     * @example
     * // Delete a few FavResidenciesIDS
     * const { count } = await prisma.favResidenciesID.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends favResidenciesIDDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, favResidenciesIDDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavResidenciesIDS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favResidenciesIDUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavResidenciesIDS
     * const favResidenciesID = await prisma.favResidenciesID.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends favResidenciesIDUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, favResidenciesIDUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavResidenciesID.
     * @param {favResidenciesIDUpsertArgs} args - Arguments to update or create a FavResidenciesID.
     * @example
     * // Update or create a FavResidenciesID
     * const favResidenciesID = await prisma.favResidenciesID.upsert({
     *   create: {
     *     // ... data to create a FavResidenciesID
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavResidenciesID we want to update
     *   }
     * })
    **/
    upsert<T extends favResidenciesIDUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, favResidenciesIDUpsertArgs<ExtArgs>>
    ): Prisma__favResidenciesIDClient<$Result.GetResult<Prisma.$favResidenciesIDPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more FavResidenciesIDS that matches the filter.
     * @param {favResidenciesIDFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const favResidenciesID = await prisma.favResidenciesID.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: favResidenciesIDFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a FavResidenciesID.
     * @param {favResidenciesIDAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const favResidenciesID = await prisma.favResidenciesID.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: favResidenciesIDAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of FavResidenciesIDS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favResidenciesIDCountArgs} args - Arguments to filter FavResidenciesIDS to count.
     * @example
     * // Count the number of FavResidenciesIDS
     * const count = await prisma.favResidenciesID.count({
     *   where: {
     *     // ... the filter for the FavResidenciesIDS we want to count
     *   }
     * })
    **/
    count<T extends favResidenciesIDCountArgs>(
      args?: Subset<T, favResidenciesIDCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavResidenciesIDCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavResidenciesID.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavResidenciesIDAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavResidenciesIDAggregateArgs>(args: Subset<T, FavResidenciesIDAggregateArgs>): Prisma.PrismaPromise<GetFavResidenciesIDAggregateType<T>>

    /**
     * Group by FavResidenciesID.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favResidenciesIDGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends favResidenciesIDGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: favResidenciesIDGroupByArgs['orderBy'] }
        : { orderBy?: favResidenciesIDGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, favResidenciesIDGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavResidenciesIDGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the favResidenciesID model
   */
  readonly fields: favResidenciesIDFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for favResidenciesID.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__favResidenciesIDClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Residency<T extends ResidencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResidencyDefaultArgs<ExtArgs>>): Prisma__ResidencyClient<$Result.GetResult<Prisma.$ResidencyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the favResidenciesID model
   */ 
  interface favResidenciesIDFieldRefs {
    readonly id: FieldRef<"favResidenciesID", 'String'>
    readonly ResidencyId: FieldRef<"favResidenciesID", 'String'>
    readonly userId: FieldRef<"favResidenciesID", 'String'>
  }
    

  // Custom InputTypes

  /**
   * favResidenciesID findUnique
   */
  export type favResidenciesIDFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * Filter, which favResidenciesID to fetch.
     */
    where: favResidenciesIDWhereUniqueInput
  }


  /**
   * favResidenciesID findUniqueOrThrow
   */
  export type favResidenciesIDFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * Filter, which favResidenciesID to fetch.
     */
    where: favResidenciesIDWhereUniqueInput
  }


  /**
   * favResidenciesID findFirst
   */
  export type favResidenciesIDFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * Filter, which favResidenciesID to fetch.
     */
    where?: favResidenciesIDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favResidenciesIDS to fetch.
     */
    orderBy?: favResidenciesIDOrderByWithRelationInput | favResidenciesIDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favResidenciesIDS.
     */
    cursor?: favResidenciesIDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favResidenciesIDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favResidenciesIDS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favResidenciesIDS.
     */
    distinct?: FavResidenciesIDScalarFieldEnum | FavResidenciesIDScalarFieldEnum[]
  }


  /**
   * favResidenciesID findFirstOrThrow
   */
  export type favResidenciesIDFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * Filter, which favResidenciesID to fetch.
     */
    where?: favResidenciesIDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favResidenciesIDS to fetch.
     */
    orderBy?: favResidenciesIDOrderByWithRelationInput | favResidenciesIDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favResidenciesIDS.
     */
    cursor?: favResidenciesIDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favResidenciesIDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favResidenciesIDS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favResidenciesIDS.
     */
    distinct?: FavResidenciesIDScalarFieldEnum | FavResidenciesIDScalarFieldEnum[]
  }


  /**
   * favResidenciesID findMany
   */
  export type favResidenciesIDFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * Filter, which favResidenciesIDS to fetch.
     */
    where?: favResidenciesIDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favResidenciesIDS to fetch.
     */
    orderBy?: favResidenciesIDOrderByWithRelationInput | favResidenciesIDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing favResidenciesIDS.
     */
    cursor?: favResidenciesIDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favResidenciesIDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favResidenciesIDS.
     */
    skip?: number
    distinct?: FavResidenciesIDScalarFieldEnum | FavResidenciesIDScalarFieldEnum[]
  }


  /**
   * favResidenciesID create
   */
  export type favResidenciesIDCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * The data needed to create a favResidenciesID.
     */
    data: XOR<favResidenciesIDCreateInput, favResidenciesIDUncheckedCreateInput>
  }


  /**
   * favResidenciesID createMany
   */
  export type favResidenciesIDCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many favResidenciesIDS.
     */
    data: favResidenciesIDCreateManyInput | favResidenciesIDCreateManyInput[]
  }


  /**
   * favResidenciesID update
   */
  export type favResidenciesIDUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * The data needed to update a favResidenciesID.
     */
    data: XOR<favResidenciesIDUpdateInput, favResidenciesIDUncheckedUpdateInput>
    /**
     * Choose, which favResidenciesID to update.
     */
    where: favResidenciesIDWhereUniqueInput
  }


  /**
   * favResidenciesID updateMany
   */
  export type favResidenciesIDUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update favResidenciesIDS.
     */
    data: XOR<favResidenciesIDUpdateManyMutationInput, favResidenciesIDUncheckedUpdateManyInput>
    /**
     * Filter which favResidenciesIDS to update
     */
    where?: favResidenciesIDWhereInput
  }


  /**
   * favResidenciesID upsert
   */
  export type favResidenciesIDUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * The filter to search for the favResidenciesID to update in case it exists.
     */
    where: favResidenciesIDWhereUniqueInput
    /**
     * In case the favResidenciesID found by the `where` argument doesn't exist, create a new favResidenciesID with this data.
     */
    create: XOR<favResidenciesIDCreateInput, favResidenciesIDUncheckedCreateInput>
    /**
     * In case the favResidenciesID was found with the provided `where` argument, update it with this data.
     */
    update: XOR<favResidenciesIDUpdateInput, favResidenciesIDUncheckedUpdateInput>
  }


  /**
   * favResidenciesID delete
   */
  export type favResidenciesIDDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
    /**
     * Filter which favResidenciesID to delete.
     */
    where: favResidenciesIDWhereUniqueInput
  }


  /**
   * favResidenciesID deleteMany
   */
  export type favResidenciesIDDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favResidenciesIDS to delete
     */
    where?: favResidenciesIDWhereInput
  }


  /**
   * favResidenciesID findRaw
   */
  export type favResidenciesIDFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * favResidenciesID aggregateRaw
   */
  export type favResidenciesIDAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * favResidenciesID without action
   */
  export type favResidenciesIDDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favResidenciesID
     */
    select?: favResidenciesIDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: favResidenciesIDInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    image: 'image',
    bookedVisits: 'bookedVisits',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ResidencyScalarFieldEnum: {
    id: 'id',
    title: 'title',
    price: 'price',
    userEmail: 'userEmail',
    locationType: 'locationType',
    placeType: 'placeType',
    mapData: 'mapData',
    locationData: 'locationData',
    placeSpace: 'placeSpace',
    placeAmeneties: 'placeAmeneties',
    description: 'description',
    star: 'star',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResidencyScalarFieldEnum = (typeof ResidencyScalarFieldEnum)[keyof typeof ResidencyScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    ResidencyId: 'ResidencyId',
    tripInfo: 'tripInfo',
    price: 'price',
    Status: 'Status',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    ResidencyId: 'ResidencyId',
    userId: 'userId',
    ReservationId: 'ReservationId',
    stars: 'stars',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const PhotosScalarFieldEnum: {
    id: 'id',
    ResidencyId: 'ResidencyId',
    public_id: 'public_id',
    url: 'url'
  };

  export type PhotosScalarFieldEnum = (typeof PhotosScalarFieldEnum)[keyof typeof PhotosScalarFieldEnum]


  export const FavResidenciesIDScalarFieldEnum: {
    id: 'id',
    ResidencyId: 'ResidencyId',
    userId: 'userId'
  };

  export type FavResidenciesIDScalarFieldEnum = (typeof FavResidenciesIDScalarFieldEnum)[keyof typeof FavResidenciesIDScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    bookedVisits?: JsonNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    ownedResidencies?: ResidencyListRelationFilter
    Reservations?: ReservationListRelationFilter
    Rating?: RatingListRelationFilter
    favResidenciesID?: FavResidenciesIDListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    bookedVisits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownedResidencies?: ResidencyOrderByRelationAggregateInput
    Reservations?: ReservationOrderByRelationAggregateInput
    Rating?: RatingOrderByRelationAggregateInput
    favResidenciesID?: favResidenciesIDOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    bookedVisits?: JsonNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    ownedResidencies?: ResidencyListRelationFilter
    Reservations?: ReservationListRelationFilter
    Rating?: RatingListRelationFilter
    favResidenciesID?: FavResidenciesIDListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    bookedVisits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    bookedVisits?: JsonNullableListFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ResidencyWhereInput = {
    AND?: ResidencyWhereInput | ResidencyWhereInput[]
    OR?: ResidencyWhereInput[]
    NOT?: ResidencyWhereInput | ResidencyWhereInput[]
    id?: StringFilter<"Residency"> | string
    title?: StringFilter<"Residency"> | string
    price?: IntFilter<"Residency"> | number
    userEmail?: StringFilter<"Residency"> | string
    locationType?: JsonFilter<"Residency">
    placeType?: JsonFilter<"Residency">
    mapData?: JsonFilter<"Residency">
    locationData?: JsonFilter<"Residency">
    placeSpace?: JsonFilter<"Residency">
    placeAmeneties?: JsonFilter<"Residency">
    description?: StringFilter<"Residency"> | string
    star?: FloatNullableFilter<"Residency"> | number | null
    createdAt?: DateTimeFilter<"Residency"> | Date | string
    updatedAt?: DateTimeFilter<"Residency"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    Reservations?: ReservationListRelationFilter
    Rating?: RatingListRelationFilter
    photos?: PhotosListRelationFilter
    favResidenciesID?: FavResidenciesIDListRelationFilter
  }

  export type ResidencyOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    userEmail?: SortOrder
    locationType?: SortOrder
    placeType?: SortOrder
    mapData?: SortOrder
    locationData?: SortOrder
    placeSpace?: SortOrder
    placeAmeneties?: SortOrder
    description?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    Reservations?: ReservationOrderByRelationAggregateInput
    Rating?: RatingOrderByRelationAggregateInput
    photos?: photosOrderByRelationAggregateInput
    favResidenciesID?: favResidenciesIDOrderByRelationAggregateInput
  }

  export type ResidencyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResidencyWhereInput | ResidencyWhereInput[]
    OR?: ResidencyWhereInput[]
    NOT?: ResidencyWhereInput | ResidencyWhereInput[]
    title?: StringFilter<"Residency"> | string
    price?: IntFilter<"Residency"> | number
    userEmail?: StringFilter<"Residency"> | string
    locationType?: JsonFilter<"Residency">
    placeType?: JsonFilter<"Residency">
    mapData?: JsonFilter<"Residency">
    locationData?: JsonFilter<"Residency">
    placeSpace?: JsonFilter<"Residency">
    placeAmeneties?: JsonFilter<"Residency">
    description?: StringFilter<"Residency"> | string
    star?: FloatNullableFilter<"Residency"> | number | null
    createdAt?: DateTimeFilter<"Residency"> | Date | string
    updatedAt?: DateTimeFilter<"Residency"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    Reservations?: ReservationListRelationFilter
    Rating?: RatingListRelationFilter
    photos?: PhotosListRelationFilter
    favResidenciesID?: FavResidenciesIDListRelationFilter
  }, "id">

  export type ResidencyOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    userEmail?: SortOrder
    locationType?: SortOrder
    placeType?: SortOrder
    mapData?: SortOrder
    locationData?: SortOrder
    placeSpace?: SortOrder
    placeAmeneties?: SortOrder
    description?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResidencyCountOrderByAggregateInput
    _avg?: ResidencyAvgOrderByAggregateInput
    _max?: ResidencyMaxOrderByAggregateInput
    _min?: ResidencyMinOrderByAggregateInput
    _sum?: ResidencySumOrderByAggregateInput
  }

  export type ResidencyScalarWhereWithAggregatesInput = {
    AND?: ResidencyScalarWhereWithAggregatesInput | ResidencyScalarWhereWithAggregatesInput[]
    OR?: ResidencyScalarWhereWithAggregatesInput[]
    NOT?: ResidencyScalarWhereWithAggregatesInput | ResidencyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Residency"> | string
    title?: StringWithAggregatesFilter<"Residency"> | string
    price?: IntWithAggregatesFilter<"Residency"> | number
    userEmail?: StringWithAggregatesFilter<"Residency"> | string
    locationType?: JsonWithAggregatesFilter<"Residency">
    placeType?: JsonWithAggregatesFilter<"Residency">
    mapData?: JsonWithAggregatesFilter<"Residency">
    locationData?: JsonWithAggregatesFilter<"Residency">
    placeSpace?: JsonWithAggregatesFilter<"Residency">
    placeAmeneties?: JsonWithAggregatesFilter<"Residency">
    description?: StringWithAggregatesFilter<"Residency"> | string
    star?: FloatNullableWithAggregatesFilter<"Residency"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Residency"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Residency"> | Date | string
  }

  export type ReservationWhereInput = {
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    id?: StringFilter<"Reservation"> | string
    userId?: StringFilter<"Reservation"> | string
    ResidencyId?: StringFilter<"Reservation"> | string
    tripInfo?: JsonFilter<"Reservation">
    price?: FloatFilter<"Reservation"> | number
    Status?: StringFilter<"Reservation"> | string
    startDate?: DateTimeFilter<"Reservation"> | Date | string
    endDate?: DateTimeFilter<"Reservation"> | Date | string
    createdAt?: DateTimeFilter<"Reservation"> | Date | string
    updatedAt?: DateTimeFilter<"Reservation"> | Date | string
    userTrip?: XOR<UserRelationFilter, UserWhereInput>
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
    Rating?: RatingListRelationFilter
  }

  export type ReservationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    ResidencyId?: SortOrder
    tripInfo?: SortOrder
    price?: SortOrder
    Status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userTrip?: UserOrderByWithRelationInput
    Residency?: ResidencyOrderByWithRelationInput
    Rating?: RatingOrderByRelationAggregateInput
  }

  export type ReservationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ResidencyId?: string
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    userId?: StringFilter<"Reservation"> | string
    tripInfo?: JsonFilter<"Reservation">
    price?: FloatFilter<"Reservation"> | number
    Status?: StringFilter<"Reservation"> | string
    startDate?: DateTimeFilter<"Reservation"> | Date | string
    endDate?: DateTimeFilter<"Reservation"> | Date | string
    createdAt?: DateTimeFilter<"Reservation"> | Date | string
    updatedAt?: DateTimeFilter<"Reservation"> | Date | string
    userTrip?: XOR<UserRelationFilter, UserWhereInput>
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
    Rating?: RatingListRelationFilter
  }, "id" | "ResidencyId">

  export type ReservationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    ResidencyId?: SortOrder
    tripInfo?: SortOrder
    price?: SortOrder
    Status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _avg?: ReservationAvgOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
    _sum?: ReservationSumOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    OR?: ReservationScalarWhereWithAggregatesInput[]
    NOT?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reservation"> | string
    userId?: StringWithAggregatesFilter<"Reservation"> | string
    ResidencyId?: StringWithAggregatesFilter<"Reservation"> | string
    tripInfo?: JsonWithAggregatesFilter<"Reservation">
    price?: FloatWithAggregatesFilter<"Reservation"> | number
    Status?: StringWithAggregatesFilter<"Reservation"> | string
    startDate?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: StringFilter<"Rating"> | string
    ResidencyId?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    ReservationId?: StringFilter<"Rating"> | string
    stars?: FloatFilter<"Rating"> | number
    comment?: StringNullableFilter<"Rating"> | string | null
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
    Reservation?: XOR<ReservationRelationFilter, ReservationWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
    ReservationId?: SortOrder
    stars?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Residency?: ResidencyOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
    Reservation?: ReservationOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    ResidencyId?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    ReservationId?: StringFilter<"Rating"> | string
    stars?: FloatFilter<"Rating"> | number
    comment?: StringNullableFilter<"Rating"> | string | null
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
    Reservation?: XOR<ReservationRelationFilter, ReservationWhereInput>
  }, "id">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
    ReservationId?: SortOrder
    stars?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Rating"> | string
    ResidencyId?: StringWithAggregatesFilter<"Rating"> | string
    userId?: StringWithAggregatesFilter<"Rating"> | string
    ReservationId?: StringWithAggregatesFilter<"Rating"> | string
    stars?: FloatWithAggregatesFilter<"Rating"> | number
    comment?: StringNullableWithAggregatesFilter<"Rating"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
  }

  export type photosWhereInput = {
    AND?: photosWhereInput | photosWhereInput[]
    OR?: photosWhereInput[]
    NOT?: photosWhereInput | photosWhereInput[]
    id?: StringFilter<"photos"> | string
    ResidencyId?: StringFilter<"photos"> | string
    public_id?: StringFilter<"photos"> | string
    url?: StringFilter<"photos"> | string
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
  }

  export type photosOrderByWithRelationInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    public_id?: SortOrder
    url?: SortOrder
    Residency?: ResidencyOrderByWithRelationInput
  }

  export type photosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: photosWhereInput | photosWhereInput[]
    OR?: photosWhereInput[]
    NOT?: photosWhereInput | photosWhereInput[]
    ResidencyId?: StringFilter<"photos"> | string
    public_id?: StringFilter<"photos"> | string
    url?: StringFilter<"photos"> | string
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
  }, "id">

  export type photosOrderByWithAggregationInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    public_id?: SortOrder
    url?: SortOrder
    _count?: photosCountOrderByAggregateInput
    _max?: photosMaxOrderByAggregateInput
    _min?: photosMinOrderByAggregateInput
  }

  export type photosScalarWhereWithAggregatesInput = {
    AND?: photosScalarWhereWithAggregatesInput | photosScalarWhereWithAggregatesInput[]
    OR?: photosScalarWhereWithAggregatesInput[]
    NOT?: photosScalarWhereWithAggregatesInput | photosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"photos"> | string
    ResidencyId?: StringWithAggregatesFilter<"photos"> | string
    public_id?: StringWithAggregatesFilter<"photos"> | string
    url?: StringWithAggregatesFilter<"photos"> | string
  }

  export type favResidenciesIDWhereInput = {
    AND?: favResidenciesIDWhereInput | favResidenciesIDWhereInput[]
    OR?: favResidenciesIDWhereInput[]
    NOT?: favResidenciesIDWhereInput | favResidenciesIDWhereInput[]
    id?: StringFilter<"favResidenciesID"> | string
    ResidencyId?: StringFilter<"favResidenciesID"> | string
    userId?: StringFilter<"favResidenciesID"> | string
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type favResidenciesIDOrderByWithRelationInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
    Residency?: ResidencyOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type favResidenciesIDWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: favResidenciesIDWhereInput | favResidenciesIDWhereInput[]
    OR?: favResidenciesIDWhereInput[]
    NOT?: favResidenciesIDWhereInput | favResidenciesIDWhereInput[]
    ResidencyId?: StringFilter<"favResidenciesID"> | string
    userId?: StringFilter<"favResidenciesID"> | string
    Residency?: XOR<ResidencyRelationFilter, ResidencyWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type favResidenciesIDOrderByWithAggregationInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
    _count?: favResidenciesIDCountOrderByAggregateInput
    _max?: favResidenciesIDMaxOrderByAggregateInput
    _min?: favResidenciesIDMinOrderByAggregateInput
  }

  export type favResidenciesIDScalarWhereWithAggregatesInput = {
    AND?: favResidenciesIDScalarWhereWithAggregatesInput | favResidenciesIDScalarWhereWithAggregatesInput[]
    OR?: favResidenciesIDScalarWhereWithAggregatesInput[]
    NOT?: favResidenciesIDScalarWhereWithAggregatesInput | favResidenciesIDScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"favResidenciesID"> | string
    ResidencyId?: StringWithAggregatesFilter<"favResidenciesID"> | string
    userId?: StringWithAggregatesFilter<"favResidenciesID"> | string
  }

  export type UserCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyCreateNestedManyWithoutOwnerInput
    Reservations?: ReservationCreateNestedManyWithoutUserTripInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyUncheckedCreateNestedManyWithoutOwnerInput
    Reservations?: ReservationUncheckedCreateNestedManyWithoutUserTripInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUpdateManyWithoutOwnerNestedInput
    Reservations?: ReservationUpdateManyWithoutUserTripNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUncheckedUpdateManyWithoutOwnerNestedInput
    Reservations?: ReservationUncheckedUpdateManyWithoutUserTripNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResidencyCreateInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedResidenciesInput
    Reservations?: ReservationCreateNestedManyWithoutResidencyInput
    Rating?: RatingCreateNestedManyWithoutResidencyInput
    photos?: photosCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyUncheckedCreateInput = {
    id?: string
    title: string
    price: number
    userEmail: string
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationUncheckedCreateNestedManyWithoutResidencyInput
    Rating?: RatingUncheckedCreateNestedManyWithoutResidencyInput
    photos?: photosUncheckedCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedResidenciesNestedInput
    Reservations?: ReservationUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUpdateManyWithoutResidencyNestedInput
    photos?: photosUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userEmail?: StringFieldUpdateOperationsInput | string
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUncheckedUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutResidencyNestedInput
    photos?: photosUncheckedUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyCreateManyInput = {
    id?: string
    title: string
    price: number
    userEmail: string
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResidencyUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResidencyUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userEmail?: StringFieldUpdateOperationsInput | string
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationCreateInput = {
    id?: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userTrip: UserCreateNestedOneWithoutReservationsInput
    Residency: ResidencyCreateNestedOneWithoutReservationsInput
    Rating?: RatingCreateNestedManyWithoutReservationInput
  }

  export type ReservationUncheckedCreateInput = {
    id?: string
    userId: string
    ResidencyId: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Rating?: RatingUncheckedCreateNestedManyWithoutReservationInput
  }

  export type ReservationUpdateInput = {
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTrip?: UserUpdateOneRequiredWithoutReservationsNestedInput
    Residency?: ResidencyUpdateOneRequiredWithoutReservationsNestedInput
    Rating?: RatingUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    ResidencyId?: StringFieldUpdateOperationsInput | string
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rating?: RatingUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type ReservationCreateManyInput = {
    id?: string
    userId: string
    ResidencyId: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationUpdateManyMutationInput = {
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    ResidencyId?: StringFieldUpdateOperationsInput | string
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateInput = {
    id?: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Residency: ResidencyCreateNestedOneWithoutRatingInput
    User: UserCreateNestedOneWithoutRatingInput
    Reservation: ReservationCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateInput = {
    id?: string
    ResidencyId: string
    userId: string
    ReservationId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingUpdateInput = {
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Residency?: ResidencyUpdateOneRequiredWithoutRatingNestedInput
    User?: UserUpdateOneRequiredWithoutRatingNestedInput
    Reservation?: ReservationUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ReservationId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateManyInput = {
    id?: string
    ResidencyId: string
    userId: string
    ReservationId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingUpdateManyMutationInput = {
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ReservationId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type photosCreateInput = {
    id?: string
    public_id: string
    url: string
    Residency: ResidencyCreateNestedOneWithoutPhotosInput
  }

  export type photosUncheckedCreateInput = {
    id?: string
    ResidencyId: string
    public_id: string
    url: string
  }

  export type photosUpdateInput = {
    public_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    Residency?: ResidencyUpdateOneRequiredWithoutPhotosNestedInput
  }

  export type photosUncheckedUpdateInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    public_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type photosCreateManyInput = {
    id?: string
    ResidencyId: string
    public_id: string
    url: string
  }

  export type photosUpdateManyMutationInput = {
    public_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type photosUncheckedUpdateManyInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    public_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type favResidenciesIDCreateInput = {
    id?: string
    Residency: ResidencyCreateNestedOneWithoutFavResidenciesIDInput
    User: UserCreateNestedOneWithoutFavResidenciesIDInput
  }

  export type favResidenciesIDUncheckedCreateInput = {
    id?: string
    ResidencyId: string
    userId: string
  }

  export type favResidenciesIDUpdateInput = {
    Residency?: ResidencyUpdateOneRequiredWithoutFavResidenciesIDNestedInput
    User?: UserUpdateOneRequiredWithoutFavResidenciesIDNestedInput
  }

  export type favResidenciesIDUncheckedUpdateInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type favResidenciesIDCreateManyInput = {
    id?: string
    ResidencyId: string
    userId: string
  }

  export type favResidenciesIDUpdateManyMutationInput = {

  }

  export type favResidenciesIDUncheckedUpdateManyInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ResidencyListRelationFilter = {
    every?: ResidencyWhereInput
    some?: ResidencyWhereInput
    none?: ResidencyWhereInput
  }

  export type ReservationListRelationFilter = {
    every?: ReservationWhereInput
    some?: ReservationWhereInput
    none?: ReservationWhereInput
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type FavResidenciesIDListRelationFilter = {
    every?: favResidenciesIDWhereInput
    some?: favResidenciesIDWhereInput
    none?: favResidenciesIDWhereInput
  }

  export type ResidencyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type favResidenciesIDOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    bookedVisits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PhotosListRelationFilter = {
    every?: photosWhereInput
    some?: photosWhereInput
    none?: photosWhereInput
  }

  export type photosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResidencyCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    userEmail?: SortOrder
    locationType?: SortOrder
    placeType?: SortOrder
    mapData?: SortOrder
    locationData?: SortOrder
    placeSpace?: SortOrder
    placeAmeneties?: SortOrder
    description?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResidencyAvgOrderByAggregateInput = {
    price?: SortOrder
    star?: SortOrder
  }

  export type ResidencyMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    userEmail?: SortOrder
    description?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResidencyMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    userEmail?: SortOrder
    description?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResidencySumOrderByAggregateInput = {
    price?: SortOrder
    star?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ResidencyRelationFilter = {
    is?: ResidencyWhereInput
    isNot?: ResidencyWhereInput
  }

  export type ReservationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ResidencyId?: SortOrder
    tripInfo?: SortOrder
    price?: SortOrder
    Status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ResidencyId?: SortOrder
    price?: SortOrder
    Status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ResidencyId?: SortOrder
    price?: SortOrder
    Status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ReservationRelationFilter = {
    is?: ReservationWhereInput
    isNot?: ReservationWhereInput
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
    ReservationId?: SortOrder
    stars?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
    ReservationId?: SortOrder
    stars?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
    ReservationId?: SortOrder
    stars?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type photosCountOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    public_id?: SortOrder
    url?: SortOrder
  }

  export type photosMaxOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    public_id?: SortOrder
    url?: SortOrder
  }

  export type photosMinOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    public_id?: SortOrder
    url?: SortOrder
  }

  export type favResidenciesIDCountOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
  }

  export type favResidenciesIDMaxOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
  }

  export type favResidenciesIDMinOrderByAggregateInput = {
    id?: SortOrder
    ResidencyId?: SortOrder
    userId?: SortOrder
  }

  export type UserCreatebookedVisitsInput = {
    set: InputJsonValue[]
  }

  export type ResidencyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ResidencyCreateWithoutOwnerInput, ResidencyUncheckedCreateWithoutOwnerInput> | ResidencyCreateWithoutOwnerInput[] | ResidencyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ResidencyCreateOrConnectWithoutOwnerInput | ResidencyCreateOrConnectWithoutOwnerInput[]
    createMany?: ResidencyCreateManyOwnerInputEnvelope
    connect?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
  }

  export type ReservationCreateNestedManyWithoutUserTripInput = {
    create?: XOR<ReservationCreateWithoutUserTripInput, ReservationUncheckedCreateWithoutUserTripInput> | ReservationCreateWithoutUserTripInput[] | ReservationUncheckedCreateWithoutUserTripInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserTripInput | ReservationCreateOrConnectWithoutUserTripInput[]
    createMany?: ReservationCreateManyUserTripInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type favResidenciesIDCreateNestedManyWithoutUserInput = {
    create?: XOR<favResidenciesIDCreateWithoutUserInput, favResidenciesIDUncheckedCreateWithoutUserInput> | favResidenciesIDCreateWithoutUserInput[] | favResidenciesIDUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutUserInput | favResidenciesIDCreateOrConnectWithoutUserInput[]
    createMany?: favResidenciesIDCreateManyUserInputEnvelope
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
  }

  export type ResidencyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ResidencyCreateWithoutOwnerInput, ResidencyUncheckedCreateWithoutOwnerInput> | ResidencyCreateWithoutOwnerInput[] | ResidencyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ResidencyCreateOrConnectWithoutOwnerInput | ResidencyCreateOrConnectWithoutOwnerInput[]
    createMany?: ResidencyCreateManyOwnerInputEnvelope
    connect?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutUserTripInput = {
    create?: XOR<ReservationCreateWithoutUserTripInput, ReservationUncheckedCreateWithoutUserTripInput> | ReservationCreateWithoutUserTripInput[] | ReservationUncheckedCreateWithoutUserTripInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserTripInput | ReservationCreateOrConnectWithoutUserTripInput[]
    createMany?: ReservationCreateManyUserTripInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type favResidenciesIDUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<favResidenciesIDCreateWithoutUserInput, favResidenciesIDUncheckedCreateWithoutUserInput> | favResidenciesIDCreateWithoutUserInput[] | favResidenciesIDUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutUserInput | favResidenciesIDCreateOrConnectWithoutUserInput[]
    createMany?: favResidenciesIDCreateManyUserInputEnvelope
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdatebookedVisitsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ResidencyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ResidencyCreateWithoutOwnerInput, ResidencyUncheckedCreateWithoutOwnerInput> | ResidencyCreateWithoutOwnerInput[] | ResidencyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ResidencyCreateOrConnectWithoutOwnerInput | ResidencyCreateOrConnectWithoutOwnerInput[]
    upsert?: ResidencyUpsertWithWhereUniqueWithoutOwnerInput | ResidencyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ResidencyCreateManyOwnerInputEnvelope
    set?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    disconnect?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    delete?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    connect?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    update?: ResidencyUpdateWithWhereUniqueWithoutOwnerInput | ResidencyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ResidencyUpdateManyWithWhereWithoutOwnerInput | ResidencyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ResidencyScalarWhereInput | ResidencyScalarWhereInput[]
  }

  export type ReservationUpdateManyWithoutUserTripNestedInput = {
    create?: XOR<ReservationCreateWithoutUserTripInput, ReservationUncheckedCreateWithoutUserTripInput> | ReservationCreateWithoutUserTripInput[] | ReservationUncheckedCreateWithoutUserTripInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserTripInput | ReservationCreateOrConnectWithoutUserTripInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutUserTripInput | ReservationUpsertWithWhereUniqueWithoutUserTripInput[]
    createMany?: ReservationCreateManyUserTripInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutUserTripInput | ReservationUpdateWithWhereUniqueWithoutUserTripInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutUserTripInput | ReservationUpdateManyWithWhereWithoutUserTripInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type favResidenciesIDUpdateManyWithoutUserNestedInput = {
    create?: XOR<favResidenciesIDCreateWithoutUserInput, favResidenciesIDUncheckedCreateWithoutUserInput> | favResidenciesIDCreateWithoutUserInput[] | favResidenciesIDUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutUserInput | favResidenciesIDCreateOrConnectWithoutUserInput[]
    upsert?: favResidenciesIDUpsertWithWhereUniqueWithoutUserInput | favResidenciesIDUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: favResidenciesIDCreateManyUserInputEnvelope
    set?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    disconnect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    delete?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    update?: favResidenciesIDUpdateWithWhereUniqueWithoutUserInput | favResidenciesIDUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: favResidenciesIDUpdateManyWithWhereWithoutUserInput | favResidenciesIDUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: favResidenciesIDScalarWhereInput | favResidenciesIDScalarWhereInput[]
  }

  export type ResidencyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ResidencyCreateWithoutOwnerInput, ResidencyUncheckedCreateWithoutOwnerInput> | ResidencyCreateWithoutOwnerInput[] | ResidencyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ResidencyCreateOrConnectWithoutOwnerInput | ResidencyCreateOrConnectWithoutOwnerInput[]
    upsert?: ResidencyUpsertWithWhereUniqueWithoutOwnerInput | ResidencyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ResidencyCreateManyOwnerInputEnvelope
    set?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    disconnect?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    delete?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    connect?: ResidencyWhereUniqueInput | ResidencyWhereUniqueInput[]
    update?: ResidencyUpdateWithWhereUniqueWithoutOwnerInput | ResidencyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ResidencyUpdateManyWithWhereWithoutOwnerInput | ResidencyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ResidencyScalarWhereInput | ResidencyScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutUserTripNestedInput = {
    create?: XOR<ReservationCreateWithoutUserTripInput, ReservationUncheckedCreateWithoutUserTripInput> | ReservationCreateWithoutUserTripInput[] | ReservationUncheckedCreateWithoutUserTripInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserTripInput | ReservationCreateOrConnectWithoutUserTripInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutUserTripInput | ReservationUpsertWithWhereUniqueWithoutUserTripInput[]
    createMany?: ReservationCreateManyUserTripInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutUserTripInput | ReservationUpdateWithWhereUniqueWithoutUserTripInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutUserTripInput | ReservationUpdateManyWithWhereWithoutUserTripInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type favResidenciesIDUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<favResidenciesIDCreateWithoutUserInput, favResidenciesIDUncheckedCreateWithoutUserInput> | favResidenciesIDCreateWithoutUserInput[] | favResidenciesIDUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutUserInput | favResidenciesIDCreateOrConnectWithoutUserInput[]
    upsert?: favResidenciesIDUpsertWithWhereUniqueWithoutUserInput | favResidenciesIDUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: favResidenciesIDCreateManyUserInputEnvelope
    set?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    disconnect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    delete?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    update?: favResidenciesIDUpdateWithWhereUniqueWithoutUserInput | favResidenciesIDUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: favResidenciesIDUpdateManyWithWhereWithoutUserInput | favResidenciesIDUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: favResidenciesIDScalarWhereInput | favResidenciesIDScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOwnedResidenciesInput = {
    create?: XOR<UserCreateWithoutOwnedResidenciesInput, UserUncheckedCreateWithoutOwnedResidenciesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedResidenciesInput
    connect?: UserWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutResidencyInput = {
    create?: XOR<ReservationCreateWithoutResidencyInput, ReservationUncheckedCreateWithoutResidencyInput> | ReservationCreateWithoutResidencyInput[] | ReservationUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutResidencyInput | ReservationCreateOrConnectWithoutResidencyInput[]
    createMany?: ReservationCreateManyResidencyInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutResidencyInput = {
    create?: XOR<RatingCreateWithoutResidencyInput, RatingUncheckedCreateWithoutResidencyInput> | RatingCreateWithoutResidencyInput[] | RatingUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutResidencyInput | RatingCreateOrConnectWithoutResidencyInput[]
    createMany?: RatingCreateManyResidencyInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type photosCreateNestedManyWithoutResidencyInput = {
    create?: XOR<photosCreateWithoutResidencyInput, photosUncheckedCreateWithoutResidencyInput> | photosCreateWithoutResidencyInput[] | photosUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: photosCreateOrConnectWithoutResidencyInput | photosCreateOrConnectWithoutResidencyInput[]
    createMany?: photosCreateManyResidencyInputEnvelope
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
  }

  export type favResidenciesIDCreateNestedManyWithoutResidencyInput = {
    create?: XOR<favResidenciesIDCreateWithoutResidencyInput, favResidenciesIDUncheckedCreateWithoutResidencyInput> | favResidenciesIDCreateWithoutResidencyInput[] | favResidenciesIDUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutResidencyInput | favResidenciesIDCreateOrConnectWithoutResidencyInput[]
    createMany?: favResidenciesIDCreateManyResidencyInputEnvelope
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutResidencyInput = {
    create?: XOR<ReservationCreateWithoutResidencyInput, ReservationUncheckedCreateWithoutResidencyInput> | ReservationCreateWithoutResidencyInput[] | ReservationUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutResidencyInput | ReservationCreateOrConnectWithoutResidencyInput[]
    createMany?: ReservationCreateManyResidencyInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutResidencyInput = {
    create?: XOR<RatingCreateWithoutResidencyInput, RatingUncheckedCreateWithoutResidencyInput> | RatingCreateWithoutResidencyInput[] | RatingUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutResidencyInput | RatingCreateOrConnectWithoutResidencyInput[]
    createMany?: RatingCreateManyResidencyInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type photosUncheckedCreateNestedManyWithoutResidencyInput = {
    create?: XOR<photosCreateWithoutResidencyInput, photosUncheckedCreateWithoutResidencyInput> | photosCreateWithoutResidencyInput[] | photosUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: photosCreateOrConnectWithoutResidencyInput | photosCreateOrConnectWithoutResidencyInput[]
    createMany?: photosCreateManyResidencyInputEnvelope
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
  }

  export type favResidenciesIDUncheckedCreateNestedManyWithoutResidencyInput = {
    create?: XOR<favResidenciesIDCreateWithoutResidencyInput, favResidenciesIDUncheckedCreateWithoutResidencyInput> | favResidenciesIDCreateWithoutResidencyInput[] | favResidenciesIDUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutResidencyInput | favResidenciesIDCreateOrConnectWithoutResidencyInput[]
    createMany?: favResidenciesIDCreateManyResidencyInputEnvelope
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type UserUpdateOneRequiredWithoutOwnedResidenciesNestedInput = {
    create?: XOR<UserCreateWithoutOwnedResidenciesInput, UserUncheckedCreateWithoutOwnedResidenciesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedResidenciesInput
    upsert?: UserUpsertWithoutOwnedResidenciesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedResidenciesInput, UserUpdateWithoutOwnedResidenciesInput>, UserUncheckedUpdateWithoutOwnedResidenciesInput>
  }

  export type ReservationUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<ReservationCreateWithoutResidencyInput, ReservationUncheckedCreateWithoutResidencyInput> | ReservationCreateWithoutResidencyInput[] | ReservationUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutResidencyInput | ReservationCreateOrConnectWithoutResidencyInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutResidencyInput | ReservationUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: ReservationCreateManyResidencyInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutResidencyInput | ReservationUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutResidencyInput | ReservationUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<RatingCreateWithoutResidencyInput, RatingUncheckedCreateWithoutResidencyInput> | RatingCreateWithoutResidencyInput[] | RatingUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutResidencyInput | RatingCreateOrConnectWithoutResidencyInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutResidencyInput | RatingUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: RatingCreateManyResidencyInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutResidencyInput | RatingUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutResidencyInput | RatingUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type photosUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<photosCreateWithoutResidencyInput, photosUncheckedCreateWithoutResidencyInput> | photosCreateWithoutResidencyInput[] | photosUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: photosCreateOrConnectWithoutResidencyInput | photosCreateOrConnectWithoutResidencyInput[]
    upsert?: photosUpsertWithWhereUniqueWithoutResidencyInput | photosUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: photosCreateManyResidencyInputEnvelope
    set?: photosWhereUniqueInput | photosWhereUniqueInput[]
    disconnect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    delete?: photosWhereUniqueInput | photosWhereUniqueInput[]
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    update?: photosUpdateWithWhereUniqueWithoutResidencyInput | photosUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: photosUpdateManyWithWhereWithoutResidencyInput | photosUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: photosScalarWhereInput | photosScalarWhereInput[]
  }

  export type favResidenciesIDUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<favResidenciesIDCreateWithoutResidencyInput, favResidenciesIDUncheckedCreateWithoutResidencyInput> | favResidenciesIDCreateWithoutResidencyInput[] | favResidenciesIDUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutResidencyInput | favResidenciesIDCreateOrConnectWithoutResidencyInput[]
    upsert?: favResidenciesIDUpsertWithWhereUniqueWithoutResidencyInput | favResidenciesIDUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: favResidenciesIDCreateManyResidencyInputEnvelope
    set?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    disconnect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    delete?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    update?: favResidenciesIDUpdateWithWhereUniqueWithoutResidencyInput | favResidenciesIDUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: favResidenciesIDUpdateManyWithWhereWithoutResidencyInput | favResidenciesIDUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: favResidenciesIDScalarWhereInput | favResidenciesIDScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<ReservationCreateWithoutResidencyInput, ReservationUncheckedCreateWithoutResidencyInput> | ReservationCreateWithoutResidencyInput[] | ReservationUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutResidencyInput | ReservationCreateOrConnectWithoutResidencyInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutResidencyInput | ReservationUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: ReservationCreateManyResidencyInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutResidencyInput | ReservationUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutResidencyInput | ReservationUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<RatingCreateWithoutResidencyInput, RatingUncheckedCreateWithoutResidencyInput> | RatingCreateWithoutResidencyInput[] | RatingUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutResidencyInput | RatingCreateOrConnectWithoutResidencyInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutResidencyInput | RatingUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: RatingCreateManyResidencyInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutResidencyInput | RatingUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutResidencyInput | RatingUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type photosUncheckedUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<photosCreateWithoutResidencyInput, photosUncheckedCreateWithoutResidencyInput> | photosCreateWithoutResidencyInput[] | photosUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: photosCreateOrConnectWithoutResidencyInput | photosCreateOrConnectWithoutResidencyInput[]
    upsert?: photosUpsertWithWhereUniqueWithoutResidencyInput | photosUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: photosCreateManyResidencyInputEnvelope
    set?: photosWhereUniqueInput | photosWhereUniqueInput[]
    disconnect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    delete?: photosWhereUniqueInput | photosWhereUniqueInput[]
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    update?: photosUpdateWithWhereUniqueWithoutResidencyInput | photosUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: photosUpdateManyWithWhereWithoutResidencyInput | photosUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: photosScalarWhereInput | photosScalarWhereInput[]
  }

  export type favResidenciesIDUncheckedUpdateManyWithoutResidencyNestedInput = {
    create?: XOR<favResidenciesIDCreateWithoutResidencyInput, favResidenciesIDUncheckedCreateWithoutResidencyInput> | favResidenciesIDCreateWithoutResidencyInput[] | favResidenciesIDUncheckedCreateWithoutResidencyInput[]
    connectOrCreate?: favResidenciesIDCreateOrConnectWithoutResidencyInput | favResidenciesIDCreateOrConnectWithoutResidencyInput[]
    upsert?: favResidenciesIDUpsertWithWhereUniqueWithoutResidencyInput | favResidenciesIDUpsertWithWhereUniqueWithoutResidencyInput[]
    createMany?: favResidenciesIDCreateManyResidencyInputEnvelope
    set?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    disconnect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    delete?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    connect?: favResidenciesIDWhereUniqueInput | favResidenciesIDWhereUniqueInput[]
    update?: favResidenciesIDUpdateWithWhereUniqueWithoutResidencyInput | favResidenciesIDUpdateWithWhereUniqueWithoutResidencyInput[]
    updateMany?: favResidenciesIDUpdateManyWithWhereWithoutResidencyInput | favResidenciesIDUpdateManyWithWhereWithoutResidencyInput[]
    deleteMany?: favResidenciesIDScalarWhereInput | favResidenciesIDScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReservationsInput = {
    create?: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReservationsInput
    connect?: UserWhereUniqueInput
  }

  export type ResidencyCreateNestedOneWithoutReservationsInput = {
    create?: XOR<ResidencyCreateWithoutReservationsInput, ResidencyUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutReservationsInput
    connect?: ResidencyWhereUniqueInput
  }

  export type RatingCreateNestedManyWithoutReservationInput = {
    create?: XOR<RatingCreateWithoutReservationInput, RatingUncheckedCreateWithoutReservationInput> | RatingCreateWithoutReservationInput[] | RatingUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReservationInput | RatingCreateOrConnectWithoutReservationInput[]
    createMany?: RatingCreateManyReservationInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutReservationInput = {
    create?: XOR<RatingCreateWithoutReservationInput, RatingUncheckedCreateWithoutReservationInput> | RatingCreateWithoutReservationInput[] | RatingUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReservationInput | RatingCreateOrConnectWithoutReservationInput[]
    createMany?: RatingCreateManyReservationInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReservationsInput
    upsert?: UserUpsertWithoutReservationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReservationsInput, UserUpdateWithoutReservationsInput>, UserUncheckedUpdateWithoutReservationsInput>
  }

  export type ResidencyUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<ResidencyCreateWithoutReservationsInput, ResidencyUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutReservationsInput
    upsert?: ResidencyUpsertWithoutReservationsInput
    connect?: ResidencyWhereUniqueInput
    update?: XOR<XOR<ResidencyUpdateToOneWithWhereWithoutReservationsInput, ResidencyUpdateWithoutReservationsInput>, ResidencyUncheckedUpdateWithoutReservationsInput>
  }

  export type RatingUpdateManyWithoutReservationNestedInput = {
    create?: XOR<RatingCreateWithoutReservationInput, RatingUncheckedCreateWithoutReservationInput> | RatingCreateWithoutReservationInput[] | RatingUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReservationInput | RatingCreateOrConnectWithoutReservationInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutReservationInput | RatingUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: RatingCreateManyReservationInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutReservationInput | RatingUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutReservationInput | RatingUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutReservationNestedInput = {
    create?: XOR<RatingCreateWithoutReservationInput, RatingUncheckedCreateWithoutReservationInput> | RatingCreateWithoutReservationInput[] | RatingUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReservationInput | RatingCreateOrConnectWithoutReservationInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutReservationInput | RatingUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: RatingCreateManyReservationInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutReservationInput | RatingUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutReservationInput | RatingUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ResidencyCreateNestedOneWithoutRatingInput = {
    create?: XOR<ResidencyCreateWithoutRatingInput, ResidencyUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutRatingInput
    connect?: ResidencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRatingInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    connect?: UserWhereUniqueInput
  }

  export type ReservationCreateNestedOneWithoutRatingInput = {
    create?: XOR<ReservationCreateWithoutRatingInput, ReservationUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutRatingInput
    connect?: ReservationWhereUniqueInput
  }

  export type ResidencyUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<ResidencyCreateWithoutRatingInput, ResidencyUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutRatingInput
    upsert?: ResidencyUpsertWithoutRatingInput
    connect?: ResidencyWhereUniqueInput
    update?: XOR<XOR<ResidencyUpdateToOneWithWhereWithoutRatingInput, ResidencyUpdateWithoutRatingInput>, ResidencyUncheckedUpdateWithoutRatingInput>
  }

  export type UserUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    upsert?: UserUpsertWithoutRatingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingInput, UserUpdateWithoutRatingInput>, UserUncheckedUpdateWithoutRatingInput>
  }

  export type ReservationUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<ReservationCreateWithoutRatingInput, ReservationUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutRatingInput
    upsert?: ReservationUpsertWithoutRatingInput
    connect?: ReservationWhereUniqueInput
    update?: XOR<XOR<ReservationUpdateToOneWithWhereWithoutRatingInput, ReservationUpdateWithoutRatingInput>, ReservationUncheckedUpdateWithoutRatingInput>
  }

  export type ResidencyCreateNestedOneWithoutPhotosInput = {
    create?: XOR<ResidencyCreateWithoutPhotosInput, ResidencyUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutPhotosInput
    connect?: ResidencyWhereUniqueInput
  }

  export type ResidencyUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<ResidencyCreateWithoutPhotosInput, ResidencyUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutPhotosInput
    upsert?: ResidencyUpsertWithoutPhotosInput
    connect?: ResidencyWhereUniqueInput
    update?: XOR<XOR<ResidencyUpdateToOneWithWhereWithoutPhotosInput, ResidencyUpdateWithoutPhotosInput>, ResidencyUncheckedUpdateWithoutPhotosInput>
  }

  export type ResidencyCreateNestedOneWithoutFavResidenciesIDInput = {
    create?: XOR<ResidencyCreateWithoutFavResidenciesIDInput, ResidencyUncheckedCreateWithoutFavResidenciesIDInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutFavResidenciesIDInput
    connect?: ResidencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFavResidenciesIDInput = {
    create?: XOR<UserCreateWithoutFavResidenciesIDInput, UserUncheckedCreateWithoutFavResidenciesIDInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavResidenciesIDInput
    connect?: UserWhereUniqueInput
  }

  export type ResidencyUpdateOneRequiredWithoutFavResidenciesIDNestedInput = {
    create?: XOR<ResidencyCreateWithoutFavResidenciesIDInput, ResidencyUncheckedCreateWithoutFavResidenciesIDInput>
    connectOrCreate?: ResidencyCreateOrConnectWithoutFavResidenciesIDInput
    upsert?: ResidencyUpsertWithoutFavResidenciesIDInput
    connect?: ResidencyWhereUniqueInput
    update?: XOR<XOR<ResidencyUpdateToOneWithWhereWithoutFavResidenciesIDInput, ResidencyUpdateWithoutFavResidenciesIDInput>, ResidencyUncheckedUpdateWithoutFavResidenciesIDInput>
  }

  export type UserUpdateOneRequiredWithoutFavResidenciesIDNestedInput = {
    create?: XOR<UserCreateWithoutFavResidenciesIDInput, UserUncheckedCreateWithoutFavResidenciesIDInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavResidenciesIDInput
    upsert?: UserUpsertWithoutFavResidenciesIDInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavResidenciesIDInput, UserUpdateWithoutFavResidenciesIDInput>, UserUncheckedUpdateWithoutFavResidenciesIDInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ResidencyCreateWithoutOwnerInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationCreateNestedManyWithoutResidencyInput
    Rating?: RatingCreateNestedManyWithoutResidencyInput
    photos?: photosCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationUncheckedCreateNestedManyWithoutResidencyInput
    Rating?: RatingUncheckedCreateNestedManyWithoutResidencyInput
    photos?: photosUncheckedCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyCreateOrConnectWithoutOwnerInput = {
    where: ResidencyWhereUniqueInput
    create: XOR<ResidencyCreateWithoutOwnerInput, ResidencyUncheckedCreateWithoutOwnerInput>
  }

  export type ResidencyCreateManyOwnerInputEnvelope = {
    data: ResidencyCreateManyOwnerInput | ResidencyCreateManyOwnerInput[]
  }

  export type ReservationCreateWithoutUserTripInput = {
    id?: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Residency: ResidencyCreateNestedOneWithoutReservationsInput
    Rating?: RatingCreateNestedManyWithoutReservationInput
  }

  export type ReservationUncheckedCreateWithoutUserTripInput = {
    id?: string
    ResidencyId: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Rating?: RatingUncheckedCreateNestedManyWithoutReservationInput
  }

  export type ReservationCreateOrConnectWithoutUserTripInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutUserTripInput, ReservationUncheckedCreateWithoutUserTripInput>
  }

  export type ReservationCreateManyUserTripInputEnvelope = {
    data: ReservationCreateManyUserTripInput | ReservationCreateManyUserTripInput[]
  }

  export type RatingCreateWithoutUserInput = {
    id?: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Residency: ResidencyCreateNestedOneWithoutRatingInput
    Reservation: ReservationCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutUserInput = {
    id?: string
    ResidencyId: string
    ReservationId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutUserInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateManyUserInputEnvelope = {
    data: RatingCreateManyUserInput | RatingCreateManyUserInput[]
  }

  export type favResidenciesIDCreateWithoutUserInput = {
    id?: string
    Residency: ResidencyCreateNestedOneWithoutFavResidenciesIDInput
  }

  export type favResidenciesIDUncheckedCreateWithoutUserInput = {
    id?: string
    ResidencyId: string
  }

  export type favResidenciesIDCreateOrConnectWithoutUserInput = {
    where: favResidenciesIDWhereUniqueInput
    create: XOR<favResidenciesIDCreateWithoutUserInput, favResidenciesIDUncheckedCreateWithoutUserInput>
  }

  export type favResidenciesIDCreateManyUserInputEnvelope = {
    data: favResidenciesIDCreateManyUserInput | favResidenciesIDCreateManyUserInput[]
  }

  export type ResidencyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ResidencyWhereUniqueInput
    update: XOR<ResidencyUpdateWithoutOwnerInput, ResidencyUncheckedUpdateWithoutOwnerInput>
    create: XOR<ResidencyCreateWithoutOwnerInput, ResidencyUncheckedCreateWithoutOwnerInput>
  }

  export type ResidencyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ResidencyWhereUniqueInput
    data: XOR<ResidencyUpdateWithoutOwnerInput, ResidencyUncheckedUpdateWithoutOwnerInput>
  }

  export type ResidencyUpdateManyWithWhereWithoutOwnerInput = {
    where: ResidencyScalarWhereInput
    data: XOR<ResidencyUpdateManyMutationInput, ResidencyUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ResidencyScalarWhereInput = {
    AND?: ResidencyScalarWhereInput | ResidencyScalarWhereInput[]
    OR?: ResidencyScalarWhereInput[]
    NOT?: ResidencyScalarWhereInput | ResidencyScalarWhereInput[]
    id?: StringFilter<"Residency"> | string
    title?: StringFilter<"Residency"> | string
    price?: IntFilter<"Residency"> | number
    userEmail?: StringFilter<"Residency"> | string
    locationType?: JsonFilter<"Residency">
    placeType?: JsonFilter<"Residency">
    mapData?: JsonFilter<"Residency">
    locationData?: JsonFilter<"Residency">
    placeSpace?: JsonFilter<"Residency">
    placeAmeneties?: JsonFilter<"Residency">
    description?: StringFilter<"Residency"> | string
    star?: FloatNullableFilter<"Residency"> | number | null
    createdAt?: DateTimeFilter<"Residency"> | Date | string
    updatedAt?: DateTimeFilter<"Residency"> | Date | string
  }

  export type ReservationUpsertWithWhereUniqueWithoutUserTripInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutUserTripInput, ReservationUncheckedUpdateWithoutUserTripInput>
    create: XOR<ReservationCreateWithoutUserTripInput, ReservationUncheckedCreateWithoutUserTripInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutUserTripInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutUserTripInput, ReservationUncheckedUpdateWithoutUserTripInput>
  }

  export type ReservationUpdateManyWithWhereWithoutUserTripInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutUserTripInput>
  }

  export type ReservationScalarWhereInput = {
    AND?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    OR?: ReservationScalarWhereInput[]
    NOT?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    id?: StringFilter<"Reservation"> | string
    userId?: StringFilter<"Reservation"> | string
    ResidencyId?: StringFilter<"Reservation"> | string
    tripInfo?: JsonFilter<"Reservation">
    price?: FloatFilter<"Reservation"> | number
    Status?: StringFilter<"Reservation"> | string
    startDate?: DateTimeFilter<"Reservation"> | Date | string
    endDate?: DateTimeFilter<"Reservation"> | Date | string
    createdAt?: DateTimeFilter<"Reservation"> | Date | string
    updatedAt?: DateTimeFilter<"Reservation"> | Date | string
  }

  export type RatingUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithWhereWithoutUserInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutUserInput>
  }

  export type RatingScalarWhereInput = {
    AND?: RatingScalarWhereInput | RatingScalarWhereInput[]
    OR?: RatingScalarWhereInput[]
    NOT?: RatingScalarWhereInput | RatingScalarWhereInput[]
    id?: StringFilter<"Rating"> | string
    ResidencyId?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    ReservationId?: StringFilter<"Rating"> | string
    stars?: FloatFilter<"Rating"> | number
    comment?: StringNullableFilter<"Rating"> | string | null
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
  }

  export type favResidenciesIDUpsertWithWhereUniqueWithoutUserInput = {
    where: favResidenciesIDWhereUniqueInput
    update: XOR<favResidenciesIDUpdateWithoutUserInput, favResidenciesIDUncheckedUpdateWithoutUserInput>
    create: XOR<favResidenciesIDCreateWithoutUserInput, favResidenciesIDUncheckedCreateWithoutUserInput>
  }

  export type favResidenciesIDUpdateWithWhereUniqueWithoutUserInput = {
    where: favResidenciesIDWhereUniqueInput
    data: XOR<favResidenciesIDUpdateWithoutUserInput, favResidenciesIDUncheckedUpdateWithoutUserInput>
  }

  export type favResidenciesIDUpdateManyWithWhereWithoutUserInput = {
    where: favResidenciesIDScalarWhereInput
    data: XOR<favResidenciesIDUpdateManyMutationInput, favResidenciesIDUncheckedUpdateManyWithoutUserInput>
  }

  export type favResidenciesIDScalarWhereInput = {
    AND?: favResidenciesIDScalarWhereInput | favResidenciesIDScalarWhereInput[]
    OR?: favResidenciesIDScalarWhereInput[]
    NOT?: favResidenciesIDScalarWhereInput | favResidenciesIDScalarWhereInput[]
    id?: StringFilter<"favResidenciesID"> | string
    ResidencyId?: StringFilter<"favResidenciesID"> | string
    userId?: StringFilter<"favResidenciesID"> | string
  }

  export type UserCreateWithoutOwnedResidenciesInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationCreateNestedManyWithoutUserTripInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedResidenciesInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationUncheckedCreateNestedManyWithoutUserTripInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedResidenciesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedResidenciesInput, UserUncheckedCreateWithoutOwnedResidenciesInput>
  }

  export type ReservationCreateWithoutResidencyInput = {
    id?: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userTrip: UserCreateNestedOneWithoutReservationsInput
    Rating?: RatingCreateNestedManyWithoutReservationInput
  }

  export type ReservationUncheckedCreateWithoutResidencyInput = {
    id?: string
    userId: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Rating?: RatingUncheckedCreateNestedManyWithoutReservationInput
  }

  export type ReservationCreateOrConnectWithoutResidencyInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutResidencyInput, ReservationUncheckedCreateWithoutResidencyInput>
  }

  export type ReservationCreateManyResidencyInputEnvelope = {
    data: ReservationCreateManyResidencyInput | ReservationCreateManyResidencyInput[]
  }

  export type RatingCreateWithoutResidencyInput = {
    id?: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutRatingInput
    Reservation: ReservationCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutResidencyInput = {
    id?: string
    userId: string
    ReservationId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutResidencyInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutResidencyInput, RatingUncheckedCreateWithoutResidencyInput>
  }

  export type RatingCreateManyResidencyInputEnvelope = {
    data: RatingCreateManyResidencyInput | RatingCreateManyResidencyInput[]
  }

  export type photosCreateWithoutResidencyInput = {
    id?: string
    public_id: string
    url: string
  }

  export type photosUncheckedCreateWithoutResidencyInput = {
    id?: string
    public_id: string
    url: string
  }

  export type photosCreateOrConnectWithoutResidencyInput = {
    where: photosWhereUniqueInput
    create: XOR<photosCreateWithoutResidencyInput, photosUncheckedCreateWithoutResidencyInput>
  }

  export type photosCreateManyResidencyInputEnvelope = {
    data: photosCreateManyResidencyInput | photosCreateManyResidencyInput[]
  }

  export type favResidenciesIDCreateWithoutResidencyInput = {
    id?: string
    User: UserCreateNestedOneWithoutFavResidenciesIDInput
  }

  export type favResidenciesIDUncheckedCreateWithoutResidencyInput = {
    id?: string
    userId: string
  }

  export type favResidenciesIDCreateOrConnectWithoutResidencyInput = {
    where: favResidenciesIDWhereUniqueInput
    create: XOR<favResidenciesIDCreateWithoutResidencyInput, favResidenciesIDUncheckedCreateWithoutResidencyInput>
  }

  export type favResidenciesIDCreateManyResidencyInputEnvelope = {
    data: favResidenciesIDCreateManyResidencyInput | favResidenciesIDCreateManyResidencyInput[]
  }

  export type UserUpsertWithoutOwnedResidenciesInput = {
    update: XOR<UserUpdateWithoutOwnedResidenciesInput, UserUncheckedUpdateWithoutOwnedResidenciesInput>
    create: XOR<UserCreateWithoutOwnedResidenciesInput, UserUncheckedCreateWithoutOwnedResidenciesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedResidenciesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedResidenciesInput, UserUncheckedUpdateWithoutOwnedResidenciesInput>
  }

  export type UserUpdateWithoutOwnedResidenciesInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUpdateManyWithoutUserTripNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedResidenciesInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUncheckedUpdateManyWithoutUserTripNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReservationUpsertWithWhereUniqueWithoutResidencyInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutResidencyInput, ReservationUncheckedUpdateWithoutResidencyInput>
    create: XOR<ReservationCreateWithoutResidencyInput, ReservationUncheckedCreateWithoutResidencyInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutResidencyInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutResidencyInput, ReservationUncheckedUpdateWithoutResidencyInput>
  }

  export type ReservationUpdateManyWithWhereWithoutResidencyInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutResidencyInput>
  }

  export type RatingUpsertWithWhereUniqueWithoutResidencyInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutResidencyInput, RatingUncheckedUpdateWithoutResidencyInput>
    create: XOR<RatingCreateWithoutResidencyInput, RatingUncheckedCreateWithoutResidencyInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutResidencyInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutResidencyInput, RatingUncheckedUpdateWithoutResidencyInput>
  }

  export type RatingUpdateManyWithWhereWithoutResidencyInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutResidencyInput>
  }

  export type photosUpsertWithWhereUniqueWithoutResidencyInput = {
    where: photosWhereUniqueInput
    update: XOR<photosUpdateWithoutResidencyInput, photosUncheckedUpdateWithoutResidencyInput>
    create: XOR<photosCreateWithoutResidencyInput, photosUncheckedCreateWithoutResidencyInput>
  }

  export type photosUpdateWithWhereUniqueWithoutResidencyInput = {
    where: photosWhereUniqueInput
    data: XOR<photosUpdateWithoutResidencyInput, photosUncheckedUpdateWithoutResidencyInput>
  }

  export type photosUpdateManyWithWhereWithoutResidencyInput = {
    where: photosScalarWhereInput
    data: XOR<photosUpdateManyMutationInput, photosUncheckedUpdateManyWithoutResidencyInput>
  }

  export type photosScalarWhereInput = {
    AND?: photosScalarWhereInput | photosScalarWhereInput[]
    OR?: photosScalarWhereInput[]
    NOT?: photosScalarWhereInput | photosScalarWhereInput[]
    id?: StringFilter<"photos"> | string
    ResidencyId?: StringFilter<"photos"> | string
    public_id?: StringFilter<"photos"> | string
    url?: StringFilter<"photos"> | string
  }

  export type favResidenciesIDUpsertWithWhereUniqueWithoutResidencyInput = {
    where: favResidenciesIDWhereUniqueInput
    update: XOR<favResidenciesIDUpdateWithoutResidencyInput, favResidenciesIDUncheckedUpdateWithoutResidencyInput>
    create: XOR<favResidenciesIDCreateWithoutResidencyInput, favResidenciesIDUncheckedCreateWithoutResidencyInput>
  }

  export type favResidenciesIDUpdateWithWhereUniqueWithoutResidencyInput = {
    where: favResidenciesIDWhereUniqueInput
    data: XOR<favResidenciesIDUpdateWithoutResidencyInput, favResidenciesIDUncheckedUpdateWithoutResidencyInput>
  }

  export type favResidenciesIDUpdateManyWithWhereWithoutResidencyInput = {
    where: favResidenciesIDScalarWhereInput
    data: XOR<favResidenciesIDUpdateManyMutationInput, favResidenciesIDUncheckedUpdateManyWithoutResidencyInput>
  }

  export type UserCreateWithoutReservationsInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyCreateNestedManyWithoutOwnerInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReservationsInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyUncheckedCreateNestedManyWithoutOwnerInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReservationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
  }

  export type ResidencyCreateWithoutReservationsInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedResidenciesInput
    Rating?: RatingCreateNestedManyWithoutResidencyInput
    photos?: photosCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyUncheckedCreateWithoutReservationsInput = {
    id?: string
    title: string
    price: number
    userEmail: string
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Rating?: RatingUncheckedCreateNestedManyWithoutResidencyInput
    photos?: photosUncheckedCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyCreateOrConnectWithoutReservationsInput = {
    where: ResidencyWhereUniqueInput
    create: XOR<ResidencyCreateWithoutReservationsInput, ResidencyUncheckedCreateWithoutReservationsInput>
  }

  export type RatingCreateWithoutReservationInput = {
    id?: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Residency: ResidencyCreateNestedOneWithoutRatingInput
    User: UserCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutReservationInput = {
    id?: string
    ResidencyId: string
    userId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutReservationInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutReservationInput, RatingUncheckedCreateWithoutReservationInput>
  }

  export type RatingCreateManyReservationInputEnvelope = {
    data: RatingCreateManyReservationInput | RatingCreateManyReservationInput[]
  }

  export type UserUpsertWithoutReservationsInput = {
    update: XOR<UserUpdateWithoutReservationsInput, UserUncheckedUpdateWithoutReservationsInput>
    create: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReservationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReservationsInput, UserUncheckedUpdateWithoutReservationsInput>
  }

  export type UserUpdateWithoutReservationsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUpdateManyWithoutOwnerNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReservationsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUncheckedUpdateManyWithoutOwnerNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ResidencyUpsertWithoutReservationsInput = {
    update: XOR<ResidencyUpdateWithoutReservationsInput, ResidencyUncheckedUpdateWithoutReservationsInput>
    create: XOR<ResidencyCreateWithoutReservationsInput, ResidencyUncheckedCreateWithoutReservationsInput>
    where?: ResidencyWhereInput
  }

  export type ResidencyUpdateToOneWithWhereWithoutReservationsInput = {
    where?: ResidencyWhereInput
    data: XOR<ResidencyUpdateWithoutReservationsInput, ResidencyUncheckedUpdateWithoutReservationsInput>
  }

  export type ResidencyUpdateWithoutReservationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedResidenciesNestedInput
    Rating?: RatingUpdateManyWithoutResidencyNestedInput
    photos?: photosUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyUncheckedUpdateWithoutReservationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userEmail?: StringFieldUpdateOperationsInput | string
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rating?: RatingUncheckedUpdateManyWithoutResidencyNestedInput
    photos?: photosUncheckedUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutResidencyNestedInput
  }

  export type RatingUpsertWithWhereUniqueWithoutReservationInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutReservationInput, RatingUncheckedUpdateWithoutReservationInput>
    create: XOR<RatingCreateWithoutReservationInput, RatingUncheckedCreateWithoutReservationInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutReservationInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutReservationInput, RatingUncheckedUpdateWithoutReservationInput>
  }

  export type RatingUpdateManyWithWhereWithoutReservationInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutReservationInput>
  }

  export type ResidencyCreateWithoutRatingInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedResidenciesInput
    Reservations?: ReservationCreateNestedManyWithoutResidencyInput
    photos?: photosCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyUncheckedCreateWithoutRatingInput = {
    id?: string
    title: string
    price: number
    userEmail: string
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationUncheckedCreateNestedManyWithoutResidencyInput
    photos?: photosUncheckedCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyCreateOrConnectWithoutRatingInput = {
    where: ResidencyWhereUniqueInput
    create: XOR<ResidencyCreateWithoutRatingInput, ResidencyUncheckedCreateWithoutRatingInput>
  }

  export type UserCreateWithoutRatingInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyCreateNestedManyWithoutOwnerInput
    Reservations?: ReservationCreateNestedManyWithoutUserTripInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRatingInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyUncheckedCreateNestedManyWithoutOwnerInput
    Reservations?: ReservationUncheckedCreateNestedManyWithoutUserTripInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRatingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
  }

  export type ReservationCreateWithoutRatingInput = {
    id?: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userTrip: UserCreateNestedOneWithoutReservationsInput
    Residency: ResidencyCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutRatingInput = {
    id?: string
    userId: string
    ResidencyId: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationCreateOrConnectWithoutRatingInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutRatingInput, ReservationUncheckedCreateWithoutRatingInput>
  }

  export type ResidencyUpsertWithoutRatingInput = {
    update: XOR<ResidencyUpdateWithoutRatingInput, ResidencyUncheckedUpdateWithoutRatingInput>
    create: XOR<ResidencyCreateWithoutRatingInput, ResidencyUncheckedCreateWithoutRatingInput>
    where?: ResidencyWhereInput
  }

  export type ResidencyUpdateToOneWithWhereWithoutRatingInput = {
    where?: ResidencyWhereInput
    data: XOR<ResidencyUpdateWithoutRatingInput, ResidencyUncheckedUpdateWithoutRatingInput>
  }

  export type ResidencyUpdateWithoutRatingInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedResidenciesNestedInput
    Reservations?: ReservationUpdateManyWithoutResidencyNestedInput
    photos?: photosUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyUncheckedUpdateWithoutRatingInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userEmail?: StringFieldUpdateOperationsInput | string
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUncheckedUpdateManyWithoutResidencyNestedInput
    photos?: photosUncheckedUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutResidencyNestedInput
  }

  export type UserUpsertWithoutRatingInput = {
    update: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
  }

  export type UserUpdateWithoutRatingInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUpdateManyWithoutOwnerNestedInput
    Reservations?: ReservationUpdateManyWithoutUserTripNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUncheckedUpdateManyWithoutOwnerNestedInput
    Reservations?: ReservationUncheckedUpdateManyWithoutUserTripNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReservationUpsertWithoutRatingInput = {
    update: XOR<ReservationUpdateWithoutRatingInput, ReservationUncheckedUpdateWithoutRatingInput>
    create: XOR<ReservationCreateWithoutRatingInput, ReservationUncheckedCreateWithoutRatingInput>
    where?: ReservationWhereInput
  }

  export type ReservationUpdateToOneWithWhereWithoutRatingInput = {
    where?: ReservationWhereInput
    data: XOR<ReservationUpdateWithoutRatingInput, ReservationUncheckedUpdateWithoutRatingInput>
  }

  export type ReservationUpdateWithoutRatingInput = {
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTrip?: UserUpdateOneRequiredWithoutReservationsNestedInput
    Residency?: ResidencyUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutRatingInput = {
    userId?: StringFieldUpdateOperationsInput | string
    ResidencyId?: StringFieldUpdateOperationsInput | string
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResidencyCreateWithoutPhotosInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedResidenciesInput
    Reservations?: ReservationCreateNestedManyWithoutResidencyInput
    Rating?: RatingCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyUncheckedCreateWithoutPhotosInput = {
    id?: string
    title: string
    price: number
    userEmail: string
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationUncheckedCreateNestedManyWithoutResidencyInput
    Rating?: RatingUncheckedCreateNestedManyWithoutResidencyInput
    favResidenciesID?: favResidenciesIDUncheckedCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyCreateOrConnectWithoutPhotosInput = {
    where: ResidencyWhereUniqueInput
    create: XOR<ResidencyCreateWithoutPhotosInput, ResidencyUncheckedCreateWithoutPhotosInput>
  }

  export type ResidencyUpsertWithoutPhotosInput = {
    update: XOR<ResidencyUpdateWithoutPhotosInput, ResidencyUncheckedUpdateWithoutPhotosInput>
    create: XOR<ResidencyCreateWithoutPhotosInput, ResidencyUncheckedCreateWithoutPhotosInput>
    where?: ResidencyWhereInput
  }

  export type ResidencyUpdateToOneWithWhereWithoutPhotosInput = {
    where?: ResidencyWhereInput
    data: XOR<ResidencyUpdateWithoutPhotosInput, ResidencyUncheckedUpdateWithoutPhotosInput>
  }

  export type ResidencyUpdateWithoutPhotosInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedResidenciesNestedInput
    Reservations?: ReservationUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyUncheckedUpdateWithoutPhotosInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userEmail?: StringFieldUpdateOperationsInput | string
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUncheckedUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyCreateWithoutFavResidenciesIDInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedResidenciesInput
    Reservations?: ReservationCreateNestedManyWithoutResidencyInput
    Rating?: RatingCreateNestedManyWithoutResidencyInput
    photos?: photosCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyUncheckedCreateWithoutFavResidenciesIDInput = {
    id?: string
    title: string
    price: number
    userEmail: string
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Reservations?: ReservationUncheckedCreateNestedManyWithoutResidencyInput
    Rating?: RatingUncheckedCreateNestedManyWithoutResidencyInput
    photos?: photosUncheckedCreateNestedManyWithoutResidencyInput
  }

  export type ResidencyCreateOrConnectWithoutFavResidenciesIDInput = {
    where: ResidencyWhereUniqueInput
    create: XOR<ResidencyCreateWithoutFavResidenciesIDInput, ResidencyUncheckedCreateWithoutFavResidenciesIDInput>
  }

  export type UserCreateWithoutFavResidenciesIDInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyCreateNestedManyWithoutOwnerInput
    Reservations?: ReservationCreateNestedManyWithoutUserTripInput
    Rating?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavResidenciesIDInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    image?: string | null
    bookedVisits?: UserCreatebookedVisitsInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedResidencies?: ResidencyUncheckedCreateNestedManyWithoutOwnerInput
    Reservations?: ReservationUncheckedCreateNestedManyWithoutUserTripInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavResidenciesIDInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavResidenciesIDInput, UserUncheckedCreateWithoutFavResidenciesIDInput>
  }

  export type ResidencyUpsertWithoutFavResidenciesIDInput = {
    update: XOR<ResidencyUpdateWithoutFavResidenciesIDInput, ResidencyUncheckedUpdateWithoutFavResidenciesIDInput>
    create: XOR<ResidencyCreateWithoutFavResidenciesIDInput, ResidencyUncheckedCreateWithoutFavResidenciesIDInput>
    where?: ResidencyWhereInput
  }

  export type ResidencyUpdateToOneWithWhereWithoutFavResidenciesIDInput = {
    where?: ResidencyWhereInput
    data: XOR<ResidencyUpdateWithoutFavResidenciesIDInput, ResidencyUncheckedUpdateWithoutFavResidenciesIDInput>
  }

  export type ResidencyUpdateWithoutFavResidenciesIDInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedResidenciesNestedInput
    Reservations?: ReservationUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUpdateManyWithoutResidencyNestedInput
    photos?: photosUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyUncheckedUpdateWithoutFavResidenciesIDInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userEmail?: StringFieldUpdateOperationsInput | string
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUncheckedUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutResidencyNestedInput
    photos?: photosUncheckedUpdateManyWithoutResidencyNestedInput
  }

  export type UserUpsertWithoutFavResidenciesIDInput = {
    update: XOR<UserUpdateWithoutFavResidenciesIDInput, UserUncheckedUpdateWithoutFavResidenciesIDInput>
    create: XOR<UserCreateWithoutFavResidenciesIDInput, UserUncheckedCreateWithoutFavResidenciesIDInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavResidenciesIDInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavResidenciesIDInput, UserUncheckedUpdateWithoutFavResidenciesIDInput>
  }

  export type UserUpdateWithoutFavResidenciesIDInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUpdateManyWithoutOwnerNestedInput
    Reservations?: ReservationUpdateManyWithoutUserTripNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavResidenciesIDInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bookedVisits?: UserUpdatebookedVisitsInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedResidencies?: ResidencyUncheckedUpdateManyWithoutOwnerNestedInput
    Reservations?: ReservationUncheckedUpdateManyWithoutUserTripNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ResidencyCreateManyOwnerInput = {
    id?: string
    title: string
    price: number
    locationType: InputJsonValue
    placeType: InputJsonValue
    mapData: InputJsonValue
    locationData: InputJsonValue
    placeSpace: InputJsonValue
    placeAmeneties: InputJsonValue
    description: string
    star?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationCreateManyUserTripInput = {
    id?: string
    ResidencyId: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateManyUserInput = {
    id?: string
    ResidencyId: string
    ReservationId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favResidenciesIDCreateManyUserInput = {
    id?: string
    ResidencyId: string
  }

  export type ResidencyUpdateWithoutOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUpdateManyWithoutResidencyNestedInput
    photos?: photosUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyUncheckedUpdateWithoutOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Reservations?: ReservationUncheckedUpdateManyWithoutResidencyNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutResidencyNestedInput
    photos?: photosUncheckedUpdateManyWithoutResidencyNestedInput
    favResidenciesID?: favResidenciesIDUncheckedUpdateManyWithoutResidencyNestedInput
  }

  export type ResidencyUncheckedUpdateManyWithoutOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    locationType?: InputJsonValue | InputJsonValue
    placeType?: InputJsonValue | InputJsonValue
    mapData?: InputJsonValue | InputJsonValue
    locationData?: InputJsonValue | InputJsonValue
    placeSpace?: InputJsonValue | InputJsonValue
    placeAmeneties?: InputJsonValue | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUpdateWithoutUserTripInput = {
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Residency?: ResidencyUpdateOneRequiredWithoutReservationsNestedInput
    Rating?: RatingUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateWithoutUserTripInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rating?: RatingUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateManyWithoutUserTripInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutUserInput = {
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Residency?: ResidencyUpdateOneRequiredWithoutRatingNestedInput
    Reservation?: ReservationUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutUserInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    ReservationId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutUserInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    ReservationId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favResidenciesIDUpdateWithoutUserInput = {
    Residency?: ResidencyUpdateOneRequiredWithoutFavResidenciesIDNestedInput
  }

  export type favResidenciesIDUncheckedUpdateWithoutUserInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
  }

  export type favResidenciesIDUncheckedUpdateManyWithoutUserInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationCreateManyResidencyInput = {
    id?: string
    userId: string
    tripInfo: InputJsonValue
    price: number
    Status: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateManyResidencyInput = {
    id?: string
    userId: string
    ReservationId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type photosCreateManyResidencyInput = {
    id?: string
    public_id: string
    url: string
  }

  export type favResidenciesIDCreateManyResidencyInput = {
    id?: string
    userId: string
  }

  export type ReservationUpdateWithoutResidencyInput = {
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTrip?: UserUpdateOneRequiredWithoutReservationsNestedInput
    Rating?: RatingUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateWithoutResidencyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Rating?: RatingUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateManyWithoutResidencyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    tripInfo?: InputJsonValue | InputJsonValue
    price?: FloatFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutResidencyInput = {
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutRatingNestedInput
    Reservation?: ReservationUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutResidencyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    ReservationId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutResidencyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    ReservationId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type photosUpdateWithoutResidencyInput = {
    public_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type photosUncheckedUpdateWithoutResidencyInput = {
    public_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type photosUncheckedUpdateManyWithoutResidencyInput = {
    public_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type favResidenciesIDUpdateWithoutResidencyInput = {
    User?: UserUpdateOneRequiredWithoutFavResidenciesIDNestedInput
  }

  export type favResidenciesIDUncheckedUpdateWithoutResidencyInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type favResidenciesIDUncheckedUpdateManyWithoutResidencyInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingCreateManyReservationInput = {
    id?: string
    ResidencyId: string
    userId: string
    stars: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingUpdateWithoutReservationInput = {
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Residency?: ResidencyUpdateOneRequiredWithoutRatingNestedInput
    User?: UserUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutReservationInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutReservationInput = {
    ResidencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stars?: FloatFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResidencyCountOutputTypeDefaultArgs instead
     */
    export type ResidencyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResidencyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationCountOutputTypeDefaultArgs instead
     */
    export type ReservationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResidencyDefaultArgs instead
     */
    export type ResidencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResidencyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationDefaultArgs instead
     */
    export type ReservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingDefaultArgs instead
     */
    export type RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use photosDefaultArgs instead
     */
    export type photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = photosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use favResidenciesIDDefaultArgs instead
     */
    export type favResidenciesIDArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = favResidenciesIDDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}